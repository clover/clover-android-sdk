/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */

/*
 * Copyright (C) 2019 Clover Network, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.clover.common.payments;

import com.clover.sdk.GenericClient;
import com.clover.sdk.GenericParcelable;

/**
 * This is an auto-generated Clover data object.
 * <p>
 * <h3>Fields</h3>
 * <ul>
 * <li>{@link #getType type}</li>
 * <li>{@link #getItemNumber itemNumber}</li>
 * <li>{@link #getProvider provider}</li>
 * <li>{@link #getSerial serial}</li>
 * <li>{@link #getVersion version}</li>
 * <li>{@link #getIdentification identification}</li>
 * <li>{@link #getStandard standard}</li>
 * </ul>
 */
@SuppressWarnings("all")
public class TerminalManagementComponent extends GenericParcelable implements com.clover.sdk.v3.Validator, com.clover.sdk.JSONifiable {

  public com.clover.common.payments.TerminalManagementComponentType getType() {
    return genClient.cacheGet(CacheKey.type);
  }

  public java.lang.String getItemNumber() {
    return genClient.cacheGet(CacheKey.itemNumber);
  }

  public java.lang.String getProvider() {
    return genClient.cacheGet(CacheKey.provider);
  }

  public java.lang.String getSerial() {
    return genClient.cacheGet(CacheKey.serial);
  }

  public java.lang.String getVersion() {
    return genClient.cacheGet(CacheKey.version);
  }

  public java.lang.String getIdentification() {
    return genClient.cacheGet(CacheKey.identification);
  }

  /**
   * Standard and assessment info for the component
   */
  public com.clover.common.payments.TerminalManagementStandard getStandard() {
    return genClient.cacheGet(CacheKey.standard);
  }




  private enum CacheKey implements com.clover.sdk.ExtractionStrategyEnum {
    type
        (com.clover.sdk.extractors.EnumExtractionStrategy.instance(com.clover.common.payments.TerminalManagementComponentType.class)),
    itemNumber
        (com.clover.sdk.extractors.BasicExtractionStrategy.instance(java.lang.String.class)),
    provider
        (com.clover.sdk.extractors.BasicExtractionStrategy.instance(java.lang.String.class)),
    serial
        (com.clover.sdk.extractors.BasicExtractionStrategy.instance(java.lang.String.class)),
    version
        (com.clover.sdk.extractors.BasicExtractionStrategy.instance(java.lang.String.class)),
    identification
        (com.clover.sdk.extractors.BasicExtractionStrategy.instance(java.lang.String.class)),
    standard
        (com.clover.sdk.extractors.RecordExtractionStrategy.instance(com.clover.common.payments.TerminalManagementStandard.JSON_CREATOR)),
      ;

    private final com.clover.sdk.extractors.ExtractionStrategy extractionStrategy;

    private CacheKey(com.clover.sdk.extractors.ExtractionStrategy s) {
      extractionStrategy = s;
    }

    @Override
    public com.clover.sdk.extractors.ExtractionStrategy getExtractionStrategy() {
      return extractionStrategy;
    }
  }

  private final GenericClient<TerminalManagementComponent> genClient;

  /**
   * Constructs a new empty instance.
   */
  public TerminalManagementComponent() {
    genClient = new GenericClient<TerminalManagementComponent>(this);
  }

  @Override
  protected GenericClient getGenericClient() {
    return genClient;
  }

  /**
   * Constructs a new empty instance.
   */
  protected TerminalManagementComponent(boolean noInit) {
    genClient = null;
  }

  /**
   * Constructs a new instance from the given JSON String.
   */
  public TerminalManagementComponent(String json) throws IllegalArgumentException {
    this();
    genClient.initJsonObject(json);
  }

  /**
   * Construct a new instance backed by the given JSONObject, the parameter is not copied so changes to it will be
   * reflected in this instance and vice-versa.
   */
  public TerminalManagementComponent(org.json.JSONObject jsonObject) {
    this();
    genClient.setJsonObject(jsonObject);
  }

  /**
   * Constructs a new instance that is a deep copy of the source instance. It does not copy the bundle or changelog.
   */
  public TerminalManagementComponent(TerminalManagementComponent src) {
    this();
    if (src.genClient.getJsonObject() != null) {
      genClient.setJsonObject(com.clover.sdk.v3.JsonHelper.deepCopy(src.genClient.getJSONObject()));
    }
  }

  /**
   * Returns the internal JSONObject backing this instance, the return value is not a copy so changes to it will be
   * reflected in this instance and vice-versa.
   */
  public org.json.JSONObject getJSONObject() {
    return genClient.getJSONObject();
  }

  @Override
  public void validate() {
  }

  /** Checks whether the 'type' field is set and is not null */
  public boolean isNotNullType() {
    return genClient.cacheValueIsNotNull(CacheKey.type);
  }

  /** Checks whether the 'itemNumber' field is set and is not null */
  public boolean isNotNullItemNumber() {
    return genClient.cacheValueIsNotNull(CacheKey.itemNumber);
  }

  /** Checks whether the 'provider' field is set and is not null */
  public boolean isNotNullProvider() {
    return genClient.cacheValueIsNotNull(CacheKey.provider);
  }

  /** Checks whether the 'serial' field is set and is not null */
  public boolean isNotNullSerial() {
    return genClient.cacheValueIsNotNull(CacheKey.serial);
  }

  /** Checks whether the 'version' field is set and is not null */
  public boolean isNotNullVersion() {
    return genClient.cacheValueIsNotNull(CacheKey.version);
  }

  /** Checks whether the 'identification' field is set and is not null */
  public boolean isNotNullIdentification() {
    return genClient.cacheValueIsNotNull(CacheKey.identification);
  }

  /** Checks whether the 'standard' field is set and is not null */
  public boolean isNotNullStandard() {
    return genClient.cacheValueIsNotNull(CacheKey.standard);
  }



  /** Checks whether the 'type' field has been set, however the value could be null */
  public boolean hasType() {
    return genClient.cacheHasKey(CacheKey.type);
  }

  /** Checks whether the 'itemNumber' field has been set, however the value could be null */
  public boolean hasItemNumber() {
    return genClient.cacheHasKey(CacheKey.itemNumber);
  }

  /** Checks whether the 'provider' field has been set, however the value could be null */
  public boolean hasProvider() {
    return genClient.cacheHasKey(CacheKey.provider);
  }

  /** Checks whether the 'serial' field has been set, however the value could be null */
  public boolean hasSerial() {
    return genClient.cacheHasKey(CacheKey.serial);
  }

  /** Checks whether the 'version' field has been set, however the value could be null */
  public boolean hasVersion() {
    return genClient.cacheHasKey(CacheKey.version);
  }

  /** Checks whether the 'identification' field has been set, however the value could be null */
  public boolean hasIdentification() {
    return genClient.cacheHasKey(CacheKey.identification);
  }

  /** Checks whether the 'standard' field has been set, however the value could be null */
  public boolean hasStandard() {
    return genClient.cacheHasKey(CacheKey.standard);
  }


  /**
   * Sets the field 'type'.
   */
  public TerminalManagementComponent setType(com.clover.common.payments.TerminalManagementComponentType type) {
    return genClient.setOther(type, CacheKey.type);
  }

  /**
   * Sets the field 'itemNumber'.
   */
  public TerminalManagementComponent setItemNumber(java.lang.String itemNumber) {
    return genClient.setOther(itemNumber, CacheKey.itemNumber);
  }

  /**
   * Sets the field 'provider'.
   */
  public TerminalManagementComponent setProvider(java.lang.String provider) {
    return genClient.setOther(provider, CacheKey.provider);
  }

  /**
   * Sets the field 'serial'.
   */
  public TerminalManagementComponent setSerial(java.lang.String serial) {
    return genClient.setOther(serial, CacheKey.serial);
  }

  /**
   * Sets the field 'version'.
   */
  public TerminalManagementComponent setVersion(java.lang.String version) {
    return genClient.setOther(version, CacheKey.version);
  }

  /**
   * Sets the field 'identification'.
   */
  public TerminalManagementComponent setIdentification(java.lang.String identification) {
    return genClient.setOther(identification, CacheKey.identification);
  }

  /**
   * Sets the field 'standard'.
   *
   * The parameter is not copied so changes to it will be reflected in this instance and vice-versa.
   */
  public TerminalManagementComponent setStandard(com.clover.common.payments.TerminalManagementStandard standard) {
    return genClient.setRecord(standard, CacheKey.standard);
  }


  /** Clears the 'type' field, the 'has' method for this field will now return false */
  public void clearType() {
    genClient.clear(CacheKey.type);
  }
  /** Clears the 'itemNumber' field, the 'has' method for this field will now return false */
  public void clearItemNumber() {
    genClient.clear(CacheKey.itemNumber);
  }
  /** Clears the 'provider' field, the 'has' method for this field will now return false */
  public void clearProvider() {
    genClient.clear(CacheKey.provider);
  }
  /** Clears the 'serial' field, the 'has' method for this field will now return false */
  public void clearSerial() {
    genClient.clear(CacheKey.serial);
  }
  /** Clears the 'version' field, the 'has' method for this field will now return false */
  public void clearVersion() {
    genClient.clear(CacheKey.version);
  }
  /** Clears the 'identification' field, the 'has' method for this field will now return false */
  public void clearIdentification() {
    genClient.clear(CacheKey.identification);
  }
  /** Clears the 'standard' field, the 'has' method for this field will now return false */
  public void clearStandard() {
    genClient.clear(CacheKey.standard);
  }


  /**
   * Returns true if this instance has any changes.
   */
  public boolean containsChanges() {
    return genClient.containsChanges();
  }

  /**
   * Reset the log of changes made to this instance, calling copyChanges() after this would return an empty instance.
   */
  public void resetChangeLog() {
    genClient.resetChangeLog();
  }

  /**
   * Create a copy of this instance that contains only fields that were set after the constructor was called.
   */
  public TerminalManagementComponent copyChanges() {
    TerminalManagementComponent copy = new TerminalManagementComponent();
    copy.mergeChanges(this);
    copy.resetChangeLog();
    return copy;
  }

  /**
   * Copy all the changed fields from the given source to this instance.
   */
  public void mergeChanges(TerminalManagementComponent src) {
    if (src.genClient.getChangeLog() != null) {
      genClient.mergeChanges(new TerminalManagementComponent(src).getJSONObject(), src.genClient);
    }
  }

  public static final android.os.Parcelable.Creator<TerminalManagementComponent> CREATOR = new android.os.Parcelable.Creator<TerminalManagementComponent>() {
    @Override
    public TerminalManagementComponent createFromParcel(android.os.Parcel in) {
      TerminalManagementComponent instance = new TerminalManagementComponent(com.clover.sdk.v3.JsonParcelHelper.ObjectWrapper.CREATOR.createFromParcel(in).unwrap());
      instance.genClient.setBundle(in.readBundle(getClass().getClassLoader()));
      instance.genClient.setChangeLog(in.readBundle());
      return instance;
    }

    @Override
    public TerminalManagementComponent[] newArray(int size) {
      return new TerminalManagementComponent[size];
    }
  };

  public static final com.clover.sdk.JSONifiable.Creator<TerminalManagementComponent> JSON_CREATOR = new com.clover.sdk.JSONifiable.Creator<TerminalManagementComponent>() {
    public Class<TerminalManagementComponent> getCreatedClass() {
      return TerminalManagementComponent.class;
    }

    @Override
    public TerminalManagementComponent create(org.json.JSONObject jsonObject) {
      return new TerminalManagementComponent(jsonObject);
    }
  };

  public interface Constraints {
    public static final boolean TYPE_IS_REQUIRED = false;
    public static final boolean ITEMNUMBER_IS_REQUIRED = false;
    public static final boolean PROVIDER_IS_REQUIRED = false;
    public static final boolean SERIAL_IS_REQUIRED = false;
    public static final boolean VERSION_IS_REQUIRED = false;
    public static final boolean IDENTIFICATION_IS_REQUIRED = false;
    public static final boolean STANDARD_IS_REQUIRED = false;
  }

}
