/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */

/*
 * Copyright (C) 2019 Clover Network, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.clover.sdk.v3.report;

import com.clover.sdk.GenericClient;
import com.clover.sdk.GenericParcelable;

/**
 * This is an auto-generated Clover data object.
 * <p>
 * Gross Sales, Net Sales, Amount Collected and the other figures that contribute to their calculation like total Taxes, Discounts, Refunds, Service Charges, Tips, Non-revenue Items and Gift Card Activations.
 * <p>
 * <h3>Fields</h3>
 * <ul>
 * <li>{@link #getStartTimestamp startTimestamp}</li>
 * <li>{@link #getEndTimestamp endTimestamp}</li>
 * <li>{@link #getSegmentLabel segmentLabel}</li>
 * <li>{@link #getGrossSales grossSales}</li>
 * <li>{@link #getExchangeAmount exchangeAmount}</li>
 * <li>{@link #getDiscountAmount discountAmount}</li>
 * <li>{@link #getRefundAmount refundAmount}</li>
 * <li>{@link #getRefundRepaymentAmount refundRepaymentAmount}</li>
 * <li>{@link #getNet net}</li>
 * <li>{@link #getGiftCardLoads giftCardLoads}</li>
 * <li>{@link #getNonRevenueItems nonRevenueItems}</li>
 * <li>{@link #getServiceChargeAmount serviceChargeAmount}</li>
 * <li>{@link #getTipAmount tipAmount}</li>
 * <li>{@link #getTaxAmount taxAmount}</li>
 * <li>{@link #getTaxAmountCollected taxAmountCollected}</li>
 * <li>{@link #getAmountCollected amountCollected}</li>
 * <li>{@link #getUnpaidBalance unpaidBalance}</li>
 * <li>{@link #getNumFullyPaidOrders numFullyPaidOrders}</li>
 * <li>{@link #getNumPartiallyPaidOrders numPartiallyPaidOrders}</li>
 * </ul>
 */
@SuppressWarnings("all")
public class SalesSummary extends GenericParcelable implements com.clover.sdk.v3.Validator, com.clover.sdk.JSONifiable {

  /**
   * Beginning of the time period for this summary.
   */
  public java.lang.Long getStartTimestamp() {
    return genClient.cacheGet(CacheKey.startTimestamp);
  }

  /**
   * End of the time period for this summary.
   */
  public java.lang.Long getEndTimestamp() {
    return genClient.cacheGet(CacheKey.endTimestamp);
  }

  /**
   * An identifier that may be used to align report segments across different merchants.
   */
  public java.lang.Integer getSegmentLabel() {
    return genClient.cacheGet(CacheKey.segmentLabel);
  }

  /**
   * The amount that would have been paid before discounts were applied. This does not include non-revenue items. It does not include tax. This is the amount before any refunds occurred. This is the total of orders where the first payment is in the reporting time range.
   */
  public java.lang.Long getGrossSales() {
    return genClient.cacheGet(CacheKey.grossSales);
  }

  /**
   * Price of all items that were returned to the merchant in a direct exchange. Does not include order level discounts. Shouldn't be modifiers or line item discounts in exchanges.
   */
  public java.lang.Long getExchangeAmount() {
    return genClient.cacheGet(CacheKey.exchangeAmount);
  }

  /**
   * Total of all discounts applied on orders that have some payment. Reported as a negative number since it is subtracted from Gross Sales to arrive at Net Sales.
   */
  public java.lang.Long getDiscountAmount() {
    return genClient.cacheGet(CacheKey.discountAmount);
  }

  /**
   * Total of all refunds and manual refunds excluding tax, tip, service charge, and non-revenue items. Reported as a negative number since it is subtracted from Gross Sales to arrive at Net Sales.
   */
  public java.lang.Long getRefundAmount() {
    return genClient.cacheGet(CacheKey.refundAmount);
  }

  /**
   * Amount of money re-paid after item was fully paid and then refunded.
   */
  public java.lang.Long getRefundRepaymentAmount() {
    return genClient.cacheGet(CacheKey.refundRepaymentAmount);
  }

  /**
   * The total of all orders with any payment with discounts and with refunds and manual refunds deducted. Excludes non-revenue items, service charges, tips and taxes.
   */
  public java.lang.Long getNet() {
    return genClient.cacheGet(CacheKey.net);
  }

  /**
   * Total paid gift card activations and loads. Reported as a positive number since it is added to Net to arrive at Amount Collected.
   */
  public java.lang.Long getGiftCardLoads() {
    return genClient.cacheGet(CacheKey.giftCardLoads);
  }

  /**
   * Total of all non-revenue items without tax and excluding paid gift card activations and loads. Reported as a positive number since it is added to Net to arrive at Amount Collected.
   */
  public java.lang.Long getNonRevenueItems() {
    return genClient.cacheGet(CacheKey.nonRevenueItems);
  }

  /**
   * Total service charges on orders with payment minus total service charge refunded. Reported as a positive number since it is added to Net to arrive at Amount Collected.
   */
  public java.lang.Long getServiceChargeAmount() {
    return genClient.cacheGet(CacheKey.serviceChargeAmount);
  }

  /**
   * Total of all tips paid minus total tips refunded. Reported as a positive number since it is added to Net to arrive at Amount Collected.
   */
  public java.lang.Long getTipAmount() {
    return genClient.cacheGet(CacheKey.tipAmount);
  }

  /**
   * The total tax liability. That is, the total of all taxes and flat tax on orders in Gross Sales minus total of all tax and flat tax refunded. Reported as a positive number since it is added to Net to arrive at Amount Collected.
   */
  public java.lang.Long getTaxAmount() {
    return genClient.cacheGet(CacheKey.taxAmount);
  }

  /**
   * The net of total tax collected. That is, the total of all taxes and flat fees paid minus taxes and flat fees that were refunded or credited.
   */
  public java.lang.Long getTaxAmountCollected() {
    return genClient.cacheGet(CacheKey.taxAmountCollected);
  }

  /**
   * Total amount of money collected minus total amount refunded or manually refunded. Includes tax, tip, service charge, non-revenue items, paid gift card activations and loads and discounts
   */
  public java.lang.Long getAmountCollected() {
    return genClient.cacheGet(CacheKey.amountCollected);
  }

  /**
   * The net of orders with payment minus the amount collected. Includes refunds, manual refunds, tax, tip, service charge, non-revenue items, paid gift card activations and loads and discounts
   */
  public java.lang.Long getUnpaidBalance() {
    return genClient.cacheGet(CacheKey.unpaidBalance);
  }

  /**
   * Number of fully paid orders. Fully paid orders are orders where the sum of payments minus the sum of refunds equals the sum of the value of line items with modifiers and discounts.
   */
  public java.lang.Long getNumFullyPaidOrders() {
    return genClient.cacheGet(CacheKey.numFullyPaidOrders);
  }

  /**
   * Number of partially paid orders. Partially paid orders are orders where the sum of payments is less than the sum of the value of line items with modifiers and discounts.
   */
  public java.lang.Long getNumPartiallyPaidOrders() {
    return genClient.cacheGet(CacheKey.numPartiallyPaidOrders);
  }




  private enum CacheKey implements com.clover.sdk.ExtractionStrategyEnum {
    startTimestamp
        (com.clover.sdk.extractors.BasicExtractionStrategy.instance(java.lang.Long.class)),
    endTimestamp
        (com.clover.sdk.extractors.BasicExtractionStrategy.instance(java.lang.Long.class)),
    segmentLabel
        (com.clover.sdk.extractors.BasicExtractionStrategy.instance(java.lang.Integer.class)),
    grossSales
        (com.clover.sdk.extractors.BasicExtractionStrategy.instance(java.lang.Long.class)),
    exchangeAmount
        (com.clover.sdk.extractors.BasicExtractionStrategy.instance(java.lang.Long.class)),
    discountAmount
        (com.clover.sdk.extractors.BasicExtractionStrategy.instance(java.lang.Long.class)),
    refundAmount
        (com.clover.sdk.extractors.BasicExtractionStrategy.instance(java.lang.Long.class)),
    refundRepaymentAmount
        (com.clover.sdk.extractors.BasicExtractionStrategy.instance(java.lang.Long.class)),
    net
        (com.clover.sdk.extractors.BasicExtractionStrategy.instance(java.lang.Long.class)),
    giftCardLoads
        (com.clover.sdk.extractors.BasicExtractionStrategy.instance(java.lang.Long.class)),
    nonRevenueItems
        (com.clover.sdk.extractors.BasicExtractionStrategy.instance(java.lang.Long.class)),
    serviceChargeAmount
        (com.clover.sdk.extractors.BasicExtractionStrategy.instance(java.lang.Long.class)),
    tipAmount
        (com.clover.sdk.extractors.BasicExtractionStrategy.instance(java.lang.Long.class)),
    taxAmount
        (com.clover.sdk.extractors.BasicExtractionStrategy.instance(java.lang.Long.class)),
    taxAmountCollected
        (com.clover.sdk.extractors.BasicExtractionStrategy.instance(java.lang.Long.class)),
    amountCollected
        (com.clover.sdk.extractors.BasicExtractionStrategy.instance(java.lang.Long.class)),
    unpaidBalance
        (com.clover.sdk.extractors.BasicExtractionStrategy.instance(java.lang.Long.class)),
    numFullyPaidOrders
        (com.clover.sdk.extractors.BasicExtractionStrategy.instance(java.lang.Long.class)),
    numPartiallyPaidOrders
        (com.clover.sdk.extractors.BasicExtractionStrategy.instance(java.lang.Long.class)),
      ;

    private final com.clover.sdk.extractors.ExtractionStrategy extractionStrategy;

    private CacheKey(com.clover.sdk.extractors.ExtractionStrategy s) {
      extractionStrategy = s;
    }

    @Override
    public com.clover.sdk.extractors.ExtractionStrategy getExtractionStrategy() {
      return extractionStrategy;
    }
  }

  private final GenericClient<SalesSummary> genClient;

  /**
   * Constructs a new empty instance.
   */
  public SalesSummary() {
    genClient = new GenericClient<SalesSummary>(this);
  }

  @Override
  protected GenericClient getGenericClient() {
    return genClient;
  }

  /**
   * Constructs a new empty instance.
   */
  protected SalesSummary(boolean noInit) {
    genClient = null;
  }

  /**
   * Constructs a new instance from the given JSON String.
   */
  public SalesSummary(String json) throws IllegalArgumentException {
    this();
    genClient.initJsonObject(json);
  }

  /**
   * Construct a new instance backed by the given JSONObject, the parameter is not copied so changes to it will be
   * reflected in this instance and vice-versa.
   */
  public SalesSummary(org.json.JSONObject jsonObject) {
    this();
    genClient.setJsonObject(jsonObject);
  }

  /**
   * Constructs a new instance that is a deep copy of the source instance. It does not copy the bundle or changelog.
   */
  public SalesSummary(SalesSummary src) {
    this();
    if (src.genClient.getJsonObject() != null) {
      genClient.setJsonObject(com.clover.sdk.v3.JsonHelper.deepCopy(src.genClient.getJSONObject()));
    }
  }

  /**
   * Returns the internal JSONObject backing this instance, the return value is not a copy so changes to it will be
   * reflected in this instance and vice-versa.
   */
  public org.json.JSONObject getJSONObject() {
    return genClient.getJSONObject();
  }

  @Override
  public void validate() {
  }

  /** Checks whether the 'startTimestamp' field is set and is not null */
  public boolean isNotNullStartTimestamp() {
    return genClient.cacheValueIsNotNull(CacheKey.startTimestamp);
  }

  /** Checks whether the 'endTimestamp' field is set and is not null */
  public boolean isNotNullEndTimestamp() {
    return genClient.cacheValueIsNotNull(CacheKey.endTimestamp);
  }

  /** Checks whether the 'segmentLabel' field is set and is not null */
  public boolean isNotNullSegmentLabel() {
    return genClient.cacheValueIsNotNull(CacheKey.segmentLabel);
  }

  /** Checks whether the 'grossSales' field is set and is not null */
  public boolean isNotNullGrossSales() {
    return genClient.cacheValueIsNotNull(CacheKey.grossSales);
  }

  /** Checks whether the 'exchangeAmount' field is set and is not null */
  public boolean isNotNullExchangeAmount() {
    return genClient.cacheValueIsNotNull(CacheKey.exchangeAmount);
  }

  /** Checks whether the 'discountAmount' field is set and is not null */
  public boolean isNotNullDiscountAmount() {
    return genClient.cacheValueIsNotNull(CacheKey.discountAmount);
  }

  /** Checks whether the 'refundAmount' field is set and is not null */
  public boolean isNotNullRefundAmount() {
    return genClient.cacheValueIsNotNull(CacheKey.refundAmount);
  }

  /** Checks whether the 'refundRepaymentAmount' field is set and is not null */
  public boolean isNotNullRefundRepaymentAmount() {
    return genClient.cacheValueIsNotNull(CacheKey.refundRepaymentAmount);
  }

  /** Checks whether the 'net' field is set and is not null */
  public boolean isNotNullNet() {
    return genClient.cacheValueIsNotNull(CacheKey.net);
  }

  /** Checks whether the 'giftCardLoads' field is set and is not null */
  public boolean isNotNullGiftCardLoads() {
    return genClient.cacheValueIsNotNull(CacheKey.giftCardLoads);
  }

  /** Checks whether the 'nonRevenueItems' field is set and is not null */
  public boolean isNotNullNonRevenueItems() {
    return genClient.cacheValueIsNotNull(CacheKey.nonRevenueItems);
  }

  /** Checks whether the 'serviceChargeAmount' field is set and is not null */
  public boolean isNotNullServiceChargeAmount() {
    return genClient.cacheValueIsNotNull(CacheKey.serviceChargeAmount);
  }

  /** Checks whether the 'tipAmount' field is set and is not null */
  public boolean isNotNullTipAmount() {
    return genClient.cacheValueIsNotNull(CacheKey.tipAmount);
  }

  /** Checks whether the 'taxAmount' field is set and is not null */
  public boolean isNotNullTaxAmount() {
    return genClient.cacheValueIsNotNull(CacheKey.taxAmount);
  }

  /** Checks whether the 'taxAmountCollected' field is set and is not null */
  public boolean isNotNullTaxAmountCollected() {
    return genClient.cacheValueIsNotNull(CacheKey.taxAmountCollected);
  }

  /** Checks whether the 'amountCollected' field is set and is not null */
  public boolean isNotNullAmountCollected() {
    return genClient.cacheValueIsNotNull(CacheKey.amountCollected);
  }

  /** Checks whether the 'unpaidBalance' field is set and is not null */
  public boolean isNotNullUnpaidBalance() {
    return genClient.cacheValueIsNotNull(CacheKey.unpaidBalance);
  }

  /** Checks whether the 'numFullyPaidOrders' field is set and is not null */
  public boolean isNotNullNumFullyPaidOrders() {
    return genClient.cacheValueIsNotNull(CacheKey.numFullyPaidOrders);
  }

  /** Checks whether the 'numPartiallyPaidOrders' field is set and is not null */
  public boolean isNotNullNumPartiallyPaidOrders() {
    return genClient.cacheValueIsNotNull(CacheKey.numPartiallyPaidOrders);
  }



  /** Checks whether the 'startTimestamp' field has been set, however the value could be null */
  public boolean hasStartTimestamp() {
    return genClient.cacheHasKey(CacheKey.startTimestamp);
  }

  /** Checks whether the 'endTimestamp' field has been set, however the value could be null */
  public boolean hasEndTimestamp() {
    return genClient.cacheHasKey(CacheKey.endTimestamp);
  }

  /** Checks whether the 'segmentLabel' field has been set, however the value could be null */
  public boolean hasSegmentLabel() {
    return genClient.cacheHasKey(CacheKey.segmentLabel);
  }

  /** Checks whether the 'grossSales' field has been set, however the value could be null */
  public boolean hasGrossSales() {
    return genClient.cacheHasKey(CacheKey.grossSales);
  }

  /** Checks whether the 'exchangeAmount' field has been set, however the value could be null */
  public boolean hasExchangeAmount() {
    return genClient.cacheHasKey(CacheKey.exchangeAmount);
  }

  /** Checks whether the 'discountAmount' field has been set, however the value could be null */
  public boolean hasDiscountAmount() {
    return genClient.cacheHasKey(CacheKey.discountAmount);
  }

  /** Checks whether the 'refundAmount' field has been set, however the value could be null */
  public boolean hasRefundAmount() {
    return genClient.cacheHasKey(CacheKey.refundAmount);
  }

  /** Checks whether the 'refundRepaymentAmount' field has been set, however the value could be null */
  public boolean hasRefundRepaymentAmount() {
    return genClient.cacheHasKey(CacheKey.refundRepaymentAmount);
  }

  /** Checks whether the 'net' field has been set, however the value could be null */
  public boolean hasNet() {
    return genClient.cacheHasKey(CacheKey.net);
  }

  /** Checks whether the 'giftCardLoads' field has been set, however the value could be null */
  public boolean hasGiftCardLoads() {
    return genClient.cacheHasKey(CacheKey.giftCardLoads);
  }

  /** Checks whether the 'nonRevenueItems' field has been set, however the value could be null */
  public boolean hasNonRevenueItems() {
    return genClient.cacheHasKey(CacheKey.nonRevenueItems);
  }

  /** Checks whether the 'serviceChargeAmount' field has been set, however the value could be null */
  public boolean hasServiceChargeAmount() {
    return genClient.cacheHasKey(CacheKey.serviceChargeAmount);
  }

  /** Checks whether the 'tipAmount' field has been set, however the value could be null */
  public boolean hasTipAmount() {
    return genClient.cacheHasKey(CacheKey.tipAmount);
  }

  /** Checks whether the 'taxAmount' field has been set, however the value could be null */
  public boolean hasTaxAmount() {
    return genClient.cacheHasKey(CacheKey.taxAmount);
  }

  /** Checks whether the 'taxAmountCollected' field has been set, however the value could be null */
  public boolean hasTaxAmountCollected() {
    return genClient.cacheHasKey(CacheKey.taxAmountCollected);
  }

  /** Checks whether the 'amountCollected' field has been set, however the value could be null */
  public boolean hasAmountCollected() {
    return genClient.cacheHasKey(CacheKey.amountCollected);
  }

  /** Checks whether the 'unpaidBalance' field has been set, however the value could be null */
  public boolean hasUnpaidBalance() {
    return genClient.cacheHasKey(CacheKey.unpaidBalance);
  }

  /** Checks whether the 'numFullyPaidOrders' field has been set, however the value could be null */
  public boolean hasNumFullyPaidOrders() {
    return genClient.cacheHasKey(CacheKey.numFullyPaidOrders);
  }

  /** Checks whether the 'numPartiallyPaidOrders' field has been set, however the value could be null */
  public boolean hasNumPartiallyPaidOrders() {
    return genClient.cacheHasKey(CacheKey.numPartiallyPaidOrders);
  }


  /**
   * Sets the field 'startTimestamp'.
   */
  public SalesSummary setStartTimestamp(java.lang.Long startTimestamp) {
    return genClient.setOther(startTimestamp, CacheKey.startTimestamp);
  }

  /**
   * Sets the field 'endTimestamp'.
   */
  public SalesSummary setEndTimestamp(java.lang.Long endTimestamp) {
    return genClient.setOther(endTimestamp, CacheKey.endTimestamp);
  }

  /**
   * Sets the field 'segmentLabel'.
   */
  public SalesSummary setSegmentLabel(java.lang.Integer segmentLabel) {
    return genClient.setOther(segmentLabel, CacheKey.segmentLabel);
  }

  /**
   * Sets the field 'grossSales'.
   */
  public SalesSummary setGrossSales(java.lang.Long grossSales) {
    return genClient.setOther(grossSales, CacheKey.grossSales);
  }

  /**
   * Sets the field 'exchangeAmount'.
   */
  public SalesSummary setExchangeAmount(java.lang.Long exchangeAmount) {
    return genClient.setOther(exchangeAmount, CacheKey.exchangeAmount);
  }

  /**
   * Sets the field 'discountAmount'.
   */
  public SalesSummary setDiscountAmount(java.lang.Long discountAmount) {
    return genClient.setOther(discountAmount, CacheKey.discountAmount);
  }

  /**
   * Sets the field 'refundAmount'.
   */
  public SalesSummary setRefundAmount(java.lang.Long refundAmount) {
    return genClient.setOther(refundAmount, CacheKey.refundAmount);
  }

  /**
   * Sets the field 'refundRepaymentAmount'.
   */
  public SalesSummary setRefundRepaymentAmount(java.lang.Long refundRepaymentAmount) {
    return genClient.setOther(refundRepaymentAmount, CacheKey.refundRepaymentAmount);
  }

  /**
   * Sets the field 'net'.
   */
  public SalesSummary setNet(java.lang.Long net) {
    return genClient.setOther(net, CacheKey.net);
  }

  /**
   * Sets the field 'giftCardLoads'.
   */
  public SalesSummary setGiftCardLoads(java.lang.Long giftCardLoads) {
    return genClient.setOther(giftCardLoads, CacheKey.giftCardLoads);
  }

  /**
   * Sets the field 'nonRevenueItems'.
   */
  public SalesSummary setNonRevenueItems(java.lang.Long nonRevenueItems) {
    return genClient.setOther(nonRevenueItems, CacheKey.nonRevenueItems);
  }

  /**
   * Sets the field 'serviceChargeAmount'.
   */
  public SalesSummary setServiceChargeAmount(java.lang.Long serviceChargeAmount) {
    return genClient.setOther(serviceChargeAmount, CacheKey.serviceChargeAmount);
  }

  /**
   * Sets the field 'tipAmount'.
   */
  public SalesSummary setTipAmount(java.lang.Long tipAmount) {
    return genClient.setOther(tipAmount, CacheKey.tipAmount);
  }

  /**
   * Sets the field 'taxAmount'.
   */
  public SalesSummary setTaxAmount(java.lang.Long taxAmount) {
    return genClient.setOther(taxAmount, CacheKey.taxAmount);
  }

  /**
   * Sets the field 'taxAmountCollected'.
   */
  public SalesSummary setTaxAmountCollected(java.lang.Long taxAmountCollected) {
    return genClient.setOther(taxAmountCollected, CacheKey.taxAmountCollected);
  }

  /**
   * Sets the field 'amountCollected'.
   */
  public SalesSummary setAmountCollected(java.lang.Long amountCollected) {
    return genClient.setOther(amountCollected, CacheKey.amountCollected);
  }

  /**
   * Sets the field 'unpaidBalance'.
   */
  public SalesSummary setUnpaidBalance(java.lang.Long unpaidBalance) {
    return genClient.setOther(unpaidBalance, CacheKey.unpaidBalance);
  }

  /**
   * Sets the field 'numFullyPaidOrders'.
   */
  public SalesSummary setNumFullyPaidOrders(java.lang.Long numFullyPaidOrders) {
    return genClient.setOther(numFullyPaidOrders, CacheKey.numFullyPaidOrders);
  }

  /**
   * Sets the field 'numPartiallyPaidOrders'.
   */
  public SalesSummary setNumPartiallyPaidOrders(java.lang.Long numPartiallyPaidOrders) {
    return genClient.setOther(numPartiallyPaidOrders, CacheKey.numPartiallyPaidOrders);
  }


  /** Clears the 'startTimestamp' field, the 'has' method for this field will now return false */
  public void clearStartTimestamp() {
    genClient.clear(CacheKey.startTimestamp);
  }
  /** Clears the 'endTimestamp' field, the 'has' method for this field will now return false */
  public void clearEndTimestamp() {
    genClient.clear(CacheKey.endTimestamp);
  }
  /** Clears the 'segmentLabel' field, the 'has' method for this field will now return false */
  public void clearSegmentLabel() {
    genClient.clear(CacheKey.segmentLabel);
  }
  /** Clears the 'grossSales' field, the 'has' method for this field will now return false */
  public void clearGrossSales() {
    genClient.clear(CacheKey.grossSales);
  }
  /** Clears the 'exchangeAmount' field, the 'has' method for this field will now return false */
  public void clearExchangeAmount() {
    genClient.clear(CacheKey.exchangeAmount);
  }
  /** Clears the 'discountAmount' field, the 'has' method for this field will now return false */
  public void clearDiscountAmount() {
    genClient.clear(CacheKey.discountAmount);
  }
  /** Clears the 'refundAmount' field, the 'has' method for this field will now return false */
  public void clearRefundAmount() {
    genClient.clear(CacheKey.refundAmount);
  }
  /** Clears the 'refundRepaymentAmount' field, the 'has' method for this field will now return false */
  public void clearRefundRepaymentAmount() {
    genClient.clear(CacheKey.refundRepaymentAmount);
  }
  /** Clears the 'net' field, the 'has' method for this field will now return false */
  public void clearNet() {
    genClient.clear(CacheKey.net);
  }
  /** Clears the 'giftCardLoads' field, the 'has' method for this field will now return false */
  public void clearGiftCardLoads() {
    genClient.clear(CacheKey.giftCardLoads);
  }
  /** Clears the 'nonRevenueItems' field, the 'has' method for this field will now return false */
  public void clearNonRevenueItems() {
    genClient.clear(CacheKey.nonRevenueItems);
  }
  /** Clears the 'serviceChargeAmount' field, the 'has' method for this field will now return false */
  public void clearServiceChargeAmount() {
    genClient.clear(CacheKey.serviceChargeAmount);
  }
  /** Clears the 'tipAmount' field, the 'has' method for this field will now return false */
  public void clearTipAmount() {
    genClient.clear(CacheKey.tipAmount);
  }
  /** Clears the 'taxAmount' field, the 'has' method for this field will now return false */
  public void clearTaxAmount() {
    genClient.clear(CacheKey.taxAmount);
  }
  /** Clears the 'taxAmountCollected' field, the 'has' method for this field will now return false */
  public void clearTaxAmountCollected() {
    genClient.clear(CacheKey.taxAmountCollected);
  }
  /** Clears the 'amountCollected' field, the 'has' method for this field will now return false */
  public void clearAmountCollected() {
    genClient.clear(CacheKey.amountCollected);
  }
  /** Clears the 'unpaidBalance' field, the 'has' method for this field will now return false */
  public void clearUnpaidBalance() {
    genClient.clear(CacheKey.unpaidBalance);
  }
  /** Clears the 'numFullyPaidOrders' field, the 'has' method for this field will now return false */
  public void clearNumFullyPaidOrders() {
    genClient.clear(CacheKey.numFullyPaidOrders);
  }
  /** Clears the 'numPartiallyPaidOrders' field, the 'has' method for this field will now return false */
  public void clearNumPartiallyPaidOrders() {
    genClient.clear(CacheKey.numPartiallyPaidOrders);
  }


  /**
   * Returns true if this instance has any changes.
   */
  public boolean containsChanges() {
    return genClient.containsChanges();
  }

  /**
   * Reset the log of changes made to this instance, calling copyChanges() after this would return an empty instance.
   */
  public void resetChangeLog() {
    genClient.resetChangeLog();
  }

  /**
   * Create a copy of this instance that contains only fields that were set after the constructor was called.
   */
  public SalesSummary copyChanges() {
    SalesSummary copy = new SalesSummary();
    copy.mergeChanges(this);
    copy.resetChangeLog();
    return copy;
  }

  /**
   * Copy all the changed fields from the given source to this instance.
   */
  public void mergeChanges(SalesSummary src) {
    if (src.genClient.getChangeLog() != null) {
      genClient.mergeChanges(new SalesSummary(src).getJSONObject(), src.genClient);
    }
  }

  public static final android.os.Parcelable.Creator<SalesSummary> CREATOR = new android.os.Parcelable.Creator<SalesSummary>() {
    @Override
    public SalesSummary createFromParcel(android.os.Parcel in) {
      SalesSummary instance = new SalesSummary(com.clover.sdk.v3.JsonParcelHelper.ObjectWrapper.CREATOR.createFromParcel(in).unwrap());
      instance.genClient.setBundle(in.readBundle(getClass().getClassLoader()));
      instance.genClient.setChangeLog(in.readBundle());
      return instance;
    }

    @Override
    public SalesSummary[] newArray(int size) {
      return new SalesSummary[size];
    }
  };

  public static final com.clover.sdk.JSONifiable.Creator<SalesSummary> JSON_CREATOR = new com.clover.sdk.JSONifiable.Creator<SalesSummary>() {
    public Class<SalesSummary> getCreatedClass() {
      return SalesSummary.class;
    }

    @Override
    public SalesSummary create(org.json.JSONObject jsonObject) {
      return new SalesSummary(jsonObject);
    }
  };

  public interface Constraints {
    public static final boolean STARTTIMESTAMP_IS_REQUIRED = false;
    public static final boolean ENDTIMESTAMP_IS_REQUIRED = false;
    public static final boolean SEGMENTLABEL_IS_REQUIRED = false;
    public static final boolean GROSSSALES_IS_REQUIRED = false;
    public static final boolean EXCHANGEAMOUNT_IS_REQUIRED = false;
    public static final boolean DISCOUNTAMOUNT_IS_REQUIRED = false;
    public static final boolean REFUNDAMOUNT_IS_REQUIRED = false;
    public static final boolean REFUNDREPAYMENTAMOUNT_IS_REQUIRED = false;
    public static final boolean NET_IS_REQUIRED = false;
    public static final boolean GIFTCARDLOADS_IS_REQUIRED = false;
    public static final boolean NONREVENUEITEMS_IS_REQUIRED = false;
    public static final boolean SERVICECHARGEAMOUNT_IS_REQUIRED = false;
    public static final boolean TIPAMOUNT_IS_REQUIRED = false;
    public static final boolean TAXAMOUNT_IS_REQUIRED = false;
    public static final boolean TAXAMOUNTCOLLECTED_IS_REQUIRED = false;
    public static final boolean AMOUNTCOLLECTED_IS_REQUIRED = false;
    public static final boolean UNPAIDBALANCE_IS_REQUIRED = false;
    public static final boolean NUMFULLYPAIDORDERS_IS_REQUIRED = false;
    public static final boolean NUMPARTIALLYPAIDORDERS_IS_REQUIRED = false;
  }

}
