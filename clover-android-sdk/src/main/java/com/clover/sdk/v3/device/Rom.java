/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */

/*
 * Copyright (C) 2019 Clover Network, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.clover.sdk.v3.device;

import com.clover.sdk.GenericClient;
import com.clover.sdk.GenericParcelable;

/**
 * This is an auto-generated Clover data object.
 * <p>
 * <h3>Fields</h3>
 * <ul>
 * <li>{@link #getId id}</li>
 * <li>{@link #getCreatedAt createdAt}</li>
 * <li>{@link #getVersion version}</li>
 * <li>{@link #getVersionName versionName}</li>
 * <li>{@link #getDescription description}</li>
 * <li>{@link #getBuildType buildType}</li>
 * <li>{@link #getIsCritical isCritical}</li>
 * <li>{@link #getPublished published}</li>
 * <li>{@link #getEnabled enabled}</li>
 * <li>{@link #getAssociationTime associationTime}</li>
 * </ul>
 */
@SuppressWarnings("all")
public class Rom extends GenericParcelable implements com.clover.sdk.v3.Validator, com.clover.sdk.JSONifiable {

  /**
   * Unique identifier
   */
  public java.lang.String getId() {
    return genClient.cacheGet(CacheKey.id);
  }

  /**
   * When the ROM was created
   */
  public java.lang.Long getCreatedAt() {
    return genClient.cacheGet(CacheKey.createdAt);
  }

  public java.lang.Long getVersion() {
    return genClient.cacheGet(CacheKey.version);
  }

  public java.lang.String getVersionName() {
    return genClient.cacheGet(CacheKey.versionName);
  }

  public java.lang.String getDescription() {
    return genClient.cacheGet(CacheKey.description);
  }

  public com.clover.sdk.v3.device.RomBuildType getBuildType() {
    return genClient.cacheGet(CacheKey.buildType);
  }

  public java.lang.Boolean getIsCritical() {
    return genClient.cacheGet(CacheKey.isCritical);
  }

  public java.lang.Boolean getPublished() {
    return genClient.cacheGet(CacheKey.published);
  }

  public java.lang.Boolean getEnabled() {
    return genClient.cacheGet(CacheKey.enabled);
  }

  /**
   * When the ROM was associated with a merchant group
   */
  public java.lang.Long getAssociationTime() {
    return genClient.cacheGet(CacheKey.associationTime);
  }




  private enum CacheKey implements com.clover.sdk.ExtractionStrategyEnum {
    id
        (com.clover.sdk.extractors.BasicExtractionStrategy.instance(java.lang.String.class)),
    createdAt
        (com.clover.sdk.extractors.BasicExtractionStrategy.instance(java.lang.Long.class)),
    version
        (com.clover.sdk.extractors.BasicExtractionStrategy.instance(java.lang.Long.class)),
    versionName
        (com.clover.sdk.extractors.BasicExtractionStrategy.instance(java.lang.String.class)),
    description
        (com.clover.sdk.extractors.BasicExtractionStrategy.instance(java.lang.String.class)),
    buildType
        (com.clover.sdk.extractors.EnumExtractionStrategy.instance(com.clover.sdk.v3.device.RomBuildType.class)),
    isCritical
        (com.clover.sdk.extractors.BasicExtractionStrategy.instance(java.lang.Boolean.class)),
    published
        (com.clover.sdk.extractors.BasicExtractionStrategy.instance(java.lang.Boolean.class)),
    enabled
        (com.clover.sdk.extractors.BasicExtractionStrategy.instance(java.lang.Boolean.class)),
    associationTime
        (com.clover.sdk.extractors.BasicExtractionStrategy.instance(java.lang.Long.class)),
      ;

    private final com.clover.sdk.extractors.ExtractionStrategy extractionStrategy;

    private CacheKey(com.clover.sdk.extractors.ExtractionStrategy s) {
      extractionStrategy = s;
    }

    @Override
    public com.clover.sdk.extractors.ExtractionStrategy getExtractionStrategy() {
      return extractionStrategy;
    }
  }

  private final GenericClient<Rom> genClient;

  /**
   * Constructs a new empty instance.
   */
  public Rom() {
    genClient = new GenericClient<Rom>(this);
  }

  @Override
  protected GenericClient getGenericClient() {
    return genClient;
  }

  /**
   * Constructs a new empty instance.
   */
  protected Rom(boolean noInit) {
    genClient = null;
  }

  /**
   * Constructs a new instance from the given JSON String.
   */
  public Rom(String json) throws IllegalArgumentException {
    this();
    genClient.initJsonObject(json);
  }

  /**
   * Construct a new instance backed by the given JSONObject, the parameter is not copied so changes to it will be
   * reflected in this instance and vice-versa.
   */
  public Rom(org.json.JSONObject jsonObject) {
    this();
    genClient.setJsonObject(jsonObject);
  }

  /**
   * Constructs a new instance that is a deep copy of the source instance. It does not copy the bundle or changelog.
   */
  public Rom(Rom src) {
    this();
    if (src.genClient.getJsonObject() != null) {
      genClient.setJsonObject(com.clover.sdk.v3.JsonHelper.deepCopy(src.genClient.getJSONObject()));
    }
  }

  /**
   * Returns the internal JSONObject backing this instance, the return value is not a copy so changes to it will be
   * reflected in this instance and vice-versa.
   */
  public org.json.JSONObject getJSONObject() {
    return genClient.getJSONObject();
  }

  @Override
  public void validate() {
    genClient.validateCloverId(CacheKey.id, getId());

    genClient.validateLength(CacheKey.versionName, getVersionName(), 255);
  }

  /** Checks whether the 'id' field is set and is not null */
  public boolean isNotNullId() {
    return genClient.cacheValueIsNotNull(CacheKey.id);
  }

  /** Checks whether the 'createdAt' field is set and is not null */
  public boolean isNotNullCreatedAt() {
    return genClient.cacheValueIsNotNull(CacheKey.createdAt);
  }

  /** Checks whether the 'version' field is set and is not null */
  public boolean isNotNullVersion() {
    return genClient.cacheValueIsNotNull(CacheKey.version);
  }

  /** Checks whether the 'versionName' field is set and is not null */
  public boolean isNotNullVersionName() {
    return genClient.cacheValueIsNotNull(CacheKey.versionName);
  }

  /** Checks whether the 'description' field is set and is not null */
  public boolean isNotNullDescription() {
    return genClient.cacheValueIsNotNull(CacheKey.description);
  }

  /** Checks whether the 'buildType' field is set and is not null */
  public boolean isNotNullBuildType() {
    return genClient.cacheValueIsNotNull(CacheKey.buildType);
  }

  /** Checks whether the 'isCritical' field is set and is not null */
  public boolean isNotNullIsCritical() {
    return genClient.cacheValueIsNotNull(CacheKey.isCritical);
  }

  /** Checks whether the 'published' field is set and is not null */
  public boolean isNotNullPublished() {
    return genClient.cacheValueIsNotNull(CacheKey.published);
  }

  /** Checks whether the 'enabled' field is set and is not null */
  public boolean isNotNullEnabled() {
    return genClient.cacheValueIsNotNull(CacheKey.enabled);
  }

  /** Checks whether the 'associationTime' field is set and is not null */
  public boolean isNotNullAssociationTime() {
    return genClient.cacheValueIsNotNull(CacheKey.associationTime);
  }



  /** Checks whether the 'id' field has been set, however the value could be null */
  public boolean hasId() {
    return genClient.cacheHasKey(CacheKey.id);
  }

  /** Checks whether the 'createdAt' field has been set, however the value could be null */
  public boolean hasCreatedAt() {
    return genClient.cacheHasKey(CacheKey.createdAt);
  }

  /** Checks whether the 'version' field has been set, however the value could be null */
  public boolean hasVersion() {
    return genClient.cacheHasKey(CacheKey.version);
  }

  /** Checks whether the 'versionName' field has been set, however the value could be null */
  public boolean hasVersionName() {
    return genClient.cacheHasKey(CacheKey.versionName);
  }

  /** Checks whether the 'description' field has been set, however the value could be null */
  public boolean hasDescription() {
    return genClient.cacheHasKey(CacheKey.description);
  }

  /** Checks whether the 'buildType' field has been set, however the value could be null */
  public boolean hasBuildType() {
    return genClient.cacheHasKey(CacheKey.buildType);
  }

  /** Checks whether the 'isCritical' field has been set, however the value could be null */
  public boolean hasIsCritical() {
    return genClient.cacheHasKey(CacheKey.isCritical);
  }

  /** Checks whether the 'published' field has been set, however the value could be null */
  public boolean hasPublished() {
    return genClient.cacheHasKey(CacheKey.published);
  }

  /** Checks whether the 'enabled' field has been set, however the value could be null */
  public boolean hasEnabled() {
    return genClient.cacheHasKey(CacheKey.enabled);
  }

  /** Checks whether the 'associationTime' field has been set, however the value could be null */
  public boolean hasAssociationTime() {
    return genClient.cacheHasKey(CacheKey.associationTime);
  }


  /**
   * Sets the field 'id'.
   */
  public Rom setId(java.lang.String id) {
    return genClient.setOther(id, CacheKey.id);
  }

  /**
   * Sets the field 'createdAt'.
   */
  public Rom setCreatedAt(java.lang.Long createdAt) {
    return genClient.setOther(createdAt, CacheKey.createdAt);
  }

  /**
   * Sets the field 'version'.
   */
  public Rom setVersion(java.lang.Long version) {
    return genClient.setOther(version, CacheKey.version);
  }

  /**
   * Sets the field 'versionName'.
   */
  public Rom setVersionName(java.lang.String versionName) {
    return genClient.setOther(versionName, CacheKey.versionName);
  }

  /**
   * Sets the field 'description'.
   */
  public Rom setDescription(java.lang.String description) {
    return genClient.setOther(description, CacheKey.description);
  }

  /**
   * Sets the field 'buildType'.
   */
  public Rom setBuildType(com.clover.sdk.v3.device.RomBuildType buildType) {
    return genClient.setOther(buildType, CacheKey.buildType);
  }

  /**
   * Sets the field 'isCritical'.
   */
  public Rom setIsCritical(java.lang.Boolean isCritical) {
    return genClient.setOther(isCritical, CacheKey.isCritical);
  }

  /**
   * Sets the field 'published'.
   */
  public Rom setPublished(java.lang.Boolean published) {
    return genClient.setOther(published, CacheKey.published);
  }

  /**
   * Sets the field 'enabled'.
   */
  public Rom setEnabled(java.lang.Boolean enabled) {
    return genClient.setOther(enabled, CacheKey.enabled);
  }

  /**
   * Sets the field 'associationTime'.
   */
  public Rom setAssociationTime(java.lang.Long associationTime) {
    return genClient.setOther(associationTime, CacheKey.associationTime);
  }


  /** Clears the 'id' field, the 'has' method for this field will now return false */
  public void clearId() {
    genClient.clear(CacheKey.id);
  }
  /** Clears the 'createdAt' field, the 'has' method for this field will now return false */
  public void clearCreatedAt() {
    genClient.clear(CacheKey.createdAt);
  }
  /** Clears the 'version' field, the 'has' method for this field will now return false */
  public void clearVersion() {
    genClient.clear(CacheKey.version);
  }
  /** Clears the 'versionName' field, the 'has' method for this field will now return false */
  public void clearVersionName() {
    genClient.clear(CacheKey.versionName);
  }
  /** Clears the 'description' field, the 'has' method for this field will now return false */
  public void clearDescription() {
    genClient.clear(CacheKey.description);
  }
  /** Clears the 'buildType' field, the 'has' method for this field will now return false */
  public void clearBuildType() {
    genClient.clear(CacheKey.buildType);
  }
  /** Clears the 'isCritical' field, the 'has' method for this field will now return false */
  public void clearIsCritical() {
    genClient.clear(CacheKey.isCritical);
  }
  /** Clears the 'published' field, the 'has' method for this field will now return false */
  public void clearPublished() {
    genClient.clear(CacheKey.published);
  }
  /** Clears the 'enabled' field, the 'has' method for this field will now return false */
  public void clearEnabled() {
    genClient.clear(CacheKey.enabled);
  }
  /** Clears the 'associationTime' field, the 'has' method for this field will now return false */
  public void clearAssociationTime() {
    genClient.clear(CacheKey.associationTime);
  }


  /**
   * Returns true if this instance has any changes.
   */
  public boolean containsChanges() {
    return genClient.containsChanges();
  }

  /**
   * Reset the log of changes made to this instance, calling copyChanges() after this would return an empty instance.
   */
  public void resetChangeLog() {
    genClient.resetChangeLog();
  }

  /**
   * Create a copy of this instance that contains only fields that were set after the constructor was called.
   */
  public Rom copyChanges() {
    Rom copy = new Rom();
    copy.mergeChanges(this);
    copy.resetChangeLog();
    return copy;
  }

  /**
   * Copy all the changed fields from the given source to this instance.
   */
  public void mergeChanges(Rom src) {
    if (src.genClient.getChangeLog() != null) {
      genClient.mergeChanges(new Rom(src).getJSONObject(), src.genClient);
    }
  }

  public static final android.os.Parcelable.Creator<Rom> CREATOR = new android.os.Parcelable.Creator<Rom>() {
    @Override
    public Rom createFromParcel(android.os.Parcel in) {
      Rom instance = new Rom(com.clover.sdk.v3.JsonParcelHelper.ObjectWrapper.CREATOR.createFromParcel(in).unwrap());
      instance.genClient.setBundle(in.readBundle(getClass().getClassLoader()));
      instance.genClient.setChangeLog(in.readBundle());
      return instance;
    }

    @Override
    public Rom[] newArray(int size) {
      return new Rom[size];
    }
  };

  public static final com.clover.sdk.JSONifiable.Creator<Rom> JSON_CREATOR = new com.clover.sdk.JSONifiable.Creator<Rom>() {
    public Class<Rom> getCreatedClass() {
      return Rom.class;
    }

    @Override
    public Rom create(org.json.JSONObject jsonObject) {
      return new Rom(jsonObject);
    }
  };

  public interface Constraints {
    public static final boolean ID_IS_REQUIRED = false;
    public static final long ID_MAX_LEN = 13;
    public static final boolean CREATEDAT_IS_REQUIRED = false;
    public static final boolean VERSION_IS_REQUIRED = false;
    public static final boolean VERSIONNAME_IS_REQUIRED = false;
    public static final long VERSIONNAME_MAX_LEN = 255;
    public static final boolean DESCRIPTION_IS_REQUIRED = false;
    public static final boolean BUILDTYPE_IS_REQUIRED = false;
    public static final boolean ISCRITICAL_IS_REQUIRED = false;
    public static final boolean PUBLISHED_IS_REQUIRED = false;
    public static final boolean ENABLED_IS_REQUIRED = false;
    public static final boolean ASSOCIATIONTIME_IS_REQUIRED = false;
  }

}
