/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */

/*
 * Copyright (C) 2019 Clover Network, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.clover.sdk.v3.billing;

import com.clover.sdk.GenericClient;
import com.clover.sdk.GenericParcelable;

/**
 * This is an auto-generated Clover data object.
 * <p>
 * <h3>Fields</h3>
 * <ul>
 * <li>{@link #getId id}</li>
 * <li>{@link #getStatus status}</li>
 * <li>{@link #getPaymentType paymentType}</li>
 * <li>{@link #getInfoleaseKey infoleaseKey}</li>
 * <li>{@link #getContractNumber contractNumber}</li>
 * <li>{@link #getGlCode glCode}</li>
 * <li>{@link #getTax tax}</li>
 * <li>{@link #getPostDate postDate}</li>
 * <li>{@link #getCreatedTime createdTime}</li>
 * <li>{@link #getModifiedTime modifiedTime}</li>
 * </ul>
 */
@SuppressWarnings("all")
public class InfoleaseChargeAttempt extends GenericParcelable implements com.clover.sdk.v3.Validator, com.clover.sdk.JSONifiable {

  public java.lang.String getId() {
    return genClient.cacheGet(CacheKey.id);
  }

  public com.clover.sdk.v3.billing.InfoleaseChargeAttemptStatus getStatus() {
    return genClient.cacheGet(CacheKey.status);
  }

  public java.lang.String getPaymentType() {
    return genClient.cacheGet(CacheKey.paymentType);
  }

  public java.lang.String getInfoleaseKey() {
    return genClient.cacheGet(CacheKey.infoleaseKey);
  }

  public java.lang.String getContractNumber() {
    return genClient.cacheGet(CacheKey.contractNumber);
  }

  public java.lang.String getGlCode() {
    return genClient.cacheGet(CacheKey.glCode);
  }

  public java.lang.Long getTax() {
    return genClient.cacheGet(CacheKey.tax);
  }

  public java.lang.String getPostDate() {
    return genClient.cacheGet(CacheKey.postDate);
  }

  public java.lang.Long getCreatedTime() {
    return genClient.cacheGet(CacheKey.createdTime);
  }

  public java.lang.Long getModifiedTime() {
    return genClient.cacheGet(CacheKey.modifiedTime);
  }




  private enum CacheKey implements com.clover.sdk.ExtractionStrategyEnum {
    id
        (com.clover.sdk.extractors.BasicExtractionStrategy.instance(java.lang.String.class)),
    status
        (com.clover.sdk.extractors.EnumExtractionStrategy.instance(com.clover.sdk.v3.billing.InfoleaseChargeAttemptStatus.class)),
    paymentType
        (com.clover.sdk.extractors.BasicExtractionStrategy.instance(java.lang.String.class)),
    infoleaseKey
        (com.clover.sdk.extractors.BasicExtractionStrategy.instance(java.lang.String.class)),
    contractNumber
        (com.clover.sdk.extractors.BasicExtractionStrategy.instance(java.lang.String.class)),
    glCode
        (com.clover.sdk.extractors.BasicExtractionStrategy.instance(java.lang.String.class)),
    tax
        (com.clover.sdk.extractors.BasicExtractionStrategy.instance(java.lang.Long.class)),
    postDate
        (com.clover.sdk.extractors.BasicExtractionStrategy.instance(java.lang.String.class)),
    createdTime
        (com.clover.sdk.extractors.BasicExtractionStrategy.instance(java.lang.Long.class)),
    modifiedTime
        (com.clover.sdk.extractors.BasicExtractionStrategy.instance(java.lang.Long.class)),
      ;

    private final com.clover.sdk.extractors.ExtractionStrategy extractionStrategy;

    private CacheKey(com.clover.sdk.extractors.ExtractionStrategy s) {
      extractionStrategy = s;
    }

    @Override
    public com.clover.sdk.extractors.ExtractionStrategy getExtractionStrategy() {
      return extractionStrategy;
    }
  }

  private final GenericClient<InfoleaseChargeAttempt> genClient;

  /**
   * Constructs a new empty instance.
   */
  public InfoleaseChargeAttempt() {
    genClient = new GenericClient<InfoleaseChargeAttempt>(this);
  }

  @Override
  protected GenericClient getGenericClient() {
    return genClient;
  }

  /**
   * Constructs a new empty instance.
   */
  protected InfoleaseChargeAttempt(boolean noInit) {
    genClient = null;
  }

  /**
   * Constructs a new instance from the given JSON String.
   */
  public InfoleaseChargeAttempt(String json) throws IllegalArgumentException {
    this();
    genClient.initJsonObject(json);
  }

  /**
   * Construct a new instance backed by the given JSONObject, the parameter is not copied so changes to it will be
   * reflected in this instance and vice-versa.
   */
  public InfoleaseChargeAttempt(org.json.JSONObject jsonObject) {
    this();
    genClient.setJsonObject(jsonObject);
  }

  /**
   * Constructs a new instance that is a deep copy of the source instance. It does not copy the bundle or changelog.
   */
  public InfoleaseChargeAttempt(InfoleaseChargeAttempt src) {
    this();
    if (src.genClient.getJsonObject() != null) {
      genClient.setJsonObject(com.clover.sdk.v3.JsonHelper.deepCopy(src.genClient.getJSONObject()));
    }
  }

  /**
   * Returns the internal JSONObject backing this instance, the return value is not a copy so changes to it will be
   * reflected in this instance and vice-versa.
   */
  public org.json.JSONObject getJSONObject() {
    return genClient.getJSONObject();
  }

  @Override
  public void validate() {
    genClient.validateCloverId(CacheKey.id, getId());
  }

  /** Checks whether the 'id' field is set and is not null */
  public boolean isNotNullId() {
    return genClient.cacheValueIsNotNull(CacheKey.id);
  }

  /** Checks whether the 'status' field is set and is not null */
  public boolean isNotNullStatus() {
    return genClient.cacheValueIsNotNull(CacheKey.status);
  }

  /** Checks whether the 'paymentType' field is set and is not null */
  public boolean isNotNullPaymentType() {
    return genClient.cacheValueIsNotNull(CacheKey.paymentType);
  }

  /** Checks whether the 'infoleaseKey' field is set and is not null */
  public boolean isNotNullInfoleaseKey() {
    return genClient.cacheValueIsNotNull(CacheKey.infoleaseKey);
  }

  /** Checks whether the 'contractNumber' field is set and is not null */
  public boolean isNotNullContractNumber() {
    return genClient.cacheValueIsNotNull(CacheKey.contractNumber);
  }

  /** Checks whether the 'glCode' field is set and is not null */
  public boolean isNotNullGlCode() {
    return genClient.cacheValueIsNotNull(CacheKey.glCode);
  }

  /** Checks whether the 'tax' field is set and is not null */
  public boolean isNotNullTax() {
    return genClient.cacheValueIsNotNull(CacheKey.tax);
  }

  /** Checks whether the 'postDate' field is set and is not null */
  public boolean isNotNullPostDate() {
    return genClient.cacheValueIsNotNull(CacheKey.postDate);
  }

  /** Checks whether the 'createdTime' field is set and is not null */
  public boolean isNotNullCreatedTime() {
    return genClient.cacheValueIsNotNull(CacheKey.createdTime);
  }

  /** Checks whether the 'modifiedTime' field is set and is not null */
  public boolean isNotNullModifiedTime() {
    return genClient.cacheValueIsNotNull(CacheKey.modifiedTime);
  }



  /** Checks whether the 'id' field has been set, however the value could be null */
  public boolean hasId() {
    return genClient.cacheHasKey(CacheKey.id);
  }

  /** Checks whether the 'status' field has been set, however the value could be null */
  public boolean hasStatus() {
    return genClient.cacheHasKey(CacheKey.status);
  }

  /** Checks whether the 'paymentType' field has been set, however the value could be null */
  public boolean hasPaymentType() {
    return genClient.cacheHasKey(CacheKey.paymentType);
  }

  /** Checks whether the 'infoleaseKey' field has been set, however the value could be null */
  public boolean hasInfoleaseKey() {
    return genClient.cacheHasKey(CacheKey.infoleaseKey);
  }

  /** Checks whether the 'contractNumber' field has been set, however the value could be null */
  public boolean hasContractNumber() {
    return genClient.cacheHasKey(CacheKey.contractNumber);
  }

  /** Checks whether the 'glCode' field has been set, however the value could be null */
  public boolean hasGlCode() {
    return genClient.cacheHasKey(CacheKey.glCode);
  }

  /** Checks whether the 'tax' field has been set, however the value could be null */
  public boolean hasTax() {
    return genClient.cacheHasKey(CacheKey.tax);
  }

  /** Checks whether the 'postDate' field has been set, however the value could be null */
  public boolean hasPostDate() {
    return genClient.cacheHasKey(CacheKey.postDate);
  }

  /** Checks whether the 'createdTime' field has been set, however the value could be null */
  public boolean hasCreatedTime() {
    return genClient.cacheHasKey(CacheKey.createdTime);
  }

  /** Checks whether the 'modifiedTime' field has been set, however the value could be null */
  public boolean hasModifiedTime() {
    return genClient.cacheHasKey(CacheKey.modifiedTime);
  }


  /**
   * Sets the field 'id'.
   */
  public InfoleaseChargeAttempt setId(java.lang.String id) {
    return genClient.setOther(id, CacheKey.id);
  }

  /**
   * Sets the field 'status'.
   */
  public InfoleaseChargeAttempt setStatus(com.clover.sdk.v3.billing.InfoleaseChargeAttemptStatus status) {
    return genClient.setOther(status, CacheKey.status);
  }

  /**
   * Sets the field 'paymentType'.
   */
  public InfoleaseChargeAttempt setPaymentType(java.lang.String paymentType) {
    return genClient.setOther(paymentType, CacheKey.paymentType);
  }

  /**
   * Sets the field 'infoleaseKey'.
   */
  public InfoleaseChargeAttempt setInfoleaseKey(java.lang.String infoleaseKey) {
    return genClient.setOther(infoleaseKey, CacheKey.infoleaseKey);
  }

  /**
   * Sets the field 'contractNumber'.
   */
  public InfoleaseChargeAttempt setContractNumber(java.lang.String contractNumber) {
    return genClient.setOther(contractNumber, CacheKey.contractNumber);
  }

  /**
   * Sets the field 'glCode'.
   */
  public InfoleaseChargeAttempt setGlCode(java.lang.String glCode) {
    return genClient.setOther(glCode, CacheKey.glCode);
  }

  /**
   * Sets the field 'tax'.
   */
  public InfoleaseChargeAttempt setTax(java.lang.Long tax) {
    return genClient.setOther(tax, CacheKey.tax);
  }

  /**
   * Sets the field 'postDate'.
   */
  public InfoleaseChargeAttempt setPostDate(java.lang.String postDate) {
    return genClient.setOther(postDate, CacheKey.postDate);
  }

  /**
   * Sets the field 'createdTime'.
   */
  public InfoleaseChargeAttempt setCreatedTime(java.lang.Long createdTime) {
    return genClient.setOther(createdTime, CacheKey.createdTime);
  }

  /**
   * Sets the field 'modifiedTime'.
   */
  public InfoleaseChargeAttempt setModifiedTime(java.lang.Long modifiedTime) {
    return genClient.setOther(modifiedTime, CacheKey.modifiedTime);
  }


  /** Clears the 'id' field, the 'has' method for this field will now return false */
  public void clearId() {
    genClient.clear(CacheKey.id);
  }
  /** Clears the 'status' field, the 'has' method for this field will now return false */
  public void clearStatus() {
    genClient.clear(CacheKey.status);
  }
  /** Clears the 'paymentType' field, the 'has' method for this field will now return false */
  public void clearPaymentType() {
    genClient.clear(CacheKey.paymentType);
  }
  /** Clears the 'infoleaseKey' field, the 'has' method for this field will now return false */
  public void clearInfoleaseKey() {
    genClient.clear(CacheKey.infoleaseKey);
  }
  /** Clears the 'contractNumber' field, the 'has' method for this field will now return false */
  public void clearContractNumber() {
    genClient.clear(CacheKey.contractNumber);
  }
  /** Clears the 'glCode' field, the 'has' method for this field will now return false */
  public void clearGlCode() {
    genClient.clear(CacheKey.glCode);
  }
  /** Clears the 'tax' field, the 'has' method for this field will now return false */
  public void clearTax() {
    genClient.clear(CacheKey.tax);
  }
  /** Clears the 'postDate' field, the 'has' method for this field will now return false */
  public void clearPostDate() {
    genClient.clear(CacheKey.postDate);
  }
  /** Clears the 'createdTime' field, the 'has' method for this field will now return false */
  public void clearCreatedTime() {
    genClient.clear(CacheKey.createdTime);
  }
  /** Clears the 'modifiedTime' field, the 'has' method for this field will now return false */
  public void clearModifiedTime() {
    genClient.clear(CacheKey.modifiedTime);
  }


  /**
   * Returns true if this instance has any changes.
   */
  public boolean containsChanges() {
    return genClient.containsChanges();
  }

  /**
   * Reset the log of changes made to this instance, calling copyChanges() after this would return an empty instance.
   */
  public void resetChangeLog() {
    genClient.resetChangeLog();
  }

  /**
   * Create a copy of this instance that contains only fields that were set after the constructor was called.
   */
  public InfoleaseChargeAttempt copyChanges() {
    InfoleaseChargeAttempt copy = new InfoleaseChargeAttempt();
    copy.mergeChanges(this);
    copy.resetChangeLog();
    return copy;
  }

  /**
   * Copy all the changed fields from the given source to this instance.
   */
  public void mergeChanges(InfoleaseChargeAttempt src) {
    if (src.genClient.getChangeLog() != null) {
      genClient.mergeChanges(new InfoleaseChargeAttempt(src).getJSONObject(), src.genClient);
    }
  }

  public static final android.os.Parcelable.Creator<InfoleaseChargeAttempt> CREATOR = new android.os.Parcelable.Creator<InfoleaseChargeAttempt>() {
    @Override
    public InfoleaseChargeAttempt createFromParcel(android.os.Parcel in) {
      InfoleaseChargeAttempt instance = new InfoleaseChargeAttempt(com.clover.sdk.v3.JsonParcelHelper.ObjectWrapper.CREATOR.createFromParcel(in).unwrap());
      instance.genClient.setBundle(in.readBundle(getClass().getClassLoader()));
      instance.genClient.setChangeLog(in.readBundle());
      return instance;
    }

    @Override
    public InfoleaseChargeAttempt[] newArray(int size) {
      return new InfoleaseChargeAttempt[size];
    }
  };

  public static final com.clover.sdk.JSONifiable.Creator<InfoleaseChargeAttempt> JSON_CREATOR = new com.clover.sdk.JSONifiable.Creator<InfoleaseChargeAttempt>() {
    public Class<InfoleaseChargeAttempt> getCreatedClass() {
      return InfoleaseChargeAttempt.class;
    }

    @Override
    public InfoleaseChargeAttempt create(org.json.JSONObject jsonObject) {
      return new InfoleaseChargeAttempt(jsonObject);
    }
  };

  public interface Constraints {
    public static final boolean ID_IS_REQUIRED = false;
    public static final long ID_MAX_LEN = 13;
    public static final boolean STATUS_IS_REQUIRED = false;
    public static final boolean PAYMENTTYPE_IS_REQUIRED = false;
    public static final boolean INFOLEASEKEY_IS_REQUIRED = false;
    public static final boolean CONTRACTNUMBER_IS_REQUIRED = false;
    public static final boolean GLCODE_IS_REQUIRED = false;
    public static final boolean TAX_IS_REQUIRED = false;
    public static final boolean POSTDATE_IS_REQUIRED = false;
    public static final boolean CREATEDTIME_IS_REQUIRED = false;
    public static final boolean MODIFIEDTIME_IS_REQUIRED = false;
  }

}
