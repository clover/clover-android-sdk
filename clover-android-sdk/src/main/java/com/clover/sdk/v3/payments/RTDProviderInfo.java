/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */

/*
 * Copyright (C) 2019 Clover Network, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.clover.sdk.v3.payments;


import com.clover.sdk.GenericClient;
import com.clover.sdk.GenericParcelable;

/**
 * This is an auto-generated Clover data object.
 * <p>
 * <h3>Fields</h3>
 * <ul>
 * <li>{@link #getPackageName packageName}</li>
 * <li>{@link #getServiceName serviceName}</li>
 * <li>{@link #getDisplayName displayName}</li>
 * <li>{@link #getPriority priority}</li>
 * </ul>
 */
@SuppressWarnings("all")
public class RTDProviderInfo extends GenericParcelable implements com.clover.sdk.v3.Validator, com.clover.sdk.JSONifiable {

  /**
   * The package name of the RTD provider app
   */
  public String getPackageName() {
    return genClient.cacheGet(CacheKey.packageName);
  }

  /**
   * The service name of the RTD provider app
   */
  public String getServiceName() {
    return genClient.cacheGet(CacheKey.serviceName);
  }

  /**
   * Display name of the RTD provider
   */
  public String getDisplayName() {
    return genClient.cacheGet(CacheKey.displayName);
  }

  /**
   * Priority of the RTD provider
   */
  public Long getPriority() {
    return genClient.cacheGet(CacheKey.priority);
  }




  private enum CacheKey implements com.clover.sdk.ExtractionStrategyEnum {
    packageName
        (com.clover.sdk.extractors.BasicExtractionStrategy.instance(String.class)),
    serviceName
        (com.clover.sdk.extractors.BasicExtractionStrategy.instance(String.class)),
    displayName
        (com.clover.sdk.extractors.BasicExtractionStrategy.instance(String.class)),
    priority
        (com.clover.sdk.extractors.BasicExtractionStrategy.instance(Long.class)),
      ;

    private final com.clover.sdk.extractors.ExtractionStrategy extractionStrategy;

    private CacheKey(com.clover.sdk.extractors.ExtractionStrategy s) {
      extractionStrategy = s;
    }

    @Override
    public com.clover.sdk.extractors.ExtractionStrategy getExtractionStrategy() {
      return extractionStrategy;
    }
  }

  private final GenericClient<RTDProviderInfo> genClient;

  /**
   * Constructs a new empty instance.
   */
  public RTDProviderInfo() {
    genClient = new GenericClient<RTDProviderInfo>(this);
  }

  @Override
  protected GenericClient getGenericClient() {
    return genClient;
  }

  /**
   * Constructs a new empty instance.
   */
  protected RTDProviderInfo(boolean noInit) {
    genClient = null;
  }

  /**
   * Constructs a new instance from the given JSON String.
   */
  public RTDProviderInfo(String json) throws IllegalArgumentException {
    this();
    genClient.initJsonObject(json);
  }

  /**
   * Construct a new instance backed by the given JSONObject, the parameter is not copied so changes to it will be
   * reflected in this instance and vice-versa.
   */
  public RTDProviderInfo(org.json.JSONObject jsonObject) {
    this();
    genClient.setJsonObject(jsonObject);
  }

  /**
   * Constructs a new instance that is a deep copy of the source instance. It does not copy the bundle or changelog.
   */
  public RTDProviderInfo(RTDProviderInfo src) {
    this();
    if (src.genClient.getJsonObject() != null) {
      genClient.setJsonObject(com.clover.sdk.v3.JsonHelper.deepCopy(src.genClient.getJSONObject()));
    }
  }

  /**
   * Returns the internal JSONObject backing this instance, the return value is not a copy so changes to it will be
   * reflected in this instance and vice-versa.
   */
  public org.json.JSONObject getJSONObject() {
    return genClient.getJSONObject();
  }

  @Override
  public void validate() {
  }

  /** Checks whether the 'packageName' field is set and is not null */
  public boolean isNotNullPackageName() {
    return genClient.cacheValueIsNotNull(CacheKey.packageName);
  }

  /** Checks whether the 'serviceName' field is set and is not null */
  public boolean isNotNullServiceName() {
    return genClient.cacheValueIsNotNull(CacheKey.serviceName);
  }

  /** Checks whether the 'displayName' field is set and is not null */
  public boolean isNotNullDisplayName() {
    return genClient.cacheValueIsNotNull(CacheKey.displayName);
  }

  /** Checks whether the 'priority' field is set and is not null */
  public boolean isNotNullPriority() {
    return genClient.cacheValueIsNotNull(CacheKey.priority);
  }



  /** Checks whether the 'packageName' field has been set, however the value could be null */
  public boolean hasPackageName() {
    return genClient.cacheHasKey(CacheKey.packageName);
  }

  /** Checks whether the 'serviceName' field has been set, however the value could be null */
  public boolean hasServiceName() {
    return genClient.cacheHasKey(CacheKey.serviceName);
  }

  /** Checks whether the 'displayName' field has been set, however the value could be null */
  public boolean hasDisplayName() {
    return genClient.cacheHasKey(CacheKey.displayName);
  }

  /** Checks whether the 'priority' field has been set, however the value could be null */
  public boolean hasPriority() {
    return genClient.cacheHasKey(CacheKey.priority);
  }


  /**
   * Sets the field 'packageName'.
   */
  public RTDProviderInfo setPackageName(String packageName) {
    return genClient.setOther(packageName, CacheKey.packageName);
  }

  /**
   * Sets the field 'serviceName'.
   */
  public RTDProviderInfo setServiceName(String serviceName) {
    return genClient.setOther(serviceName, CacheKey.serviceName);
  }

  /**
   * Sets the field 'displayName'.
   */
  public RTDProviderInfo setDisplayName(String displayName) {
    return genClient.setOther(displayName, CacheKey.displayName);
  }

  /**
   * Sets the field 'priority'.
   */
  public RTDProviderInfo setPriority(Long priority) {
    return genClient.setOther(priority, CacheKey.priority);
  }


  /** Clears the 'packageName' field, the 'has' method for this field will now return false */
  public void clearPackageName() {
    genClient.clear(CacheKey.packageName);
  }
  /** Clears the 'serviceName' field, the 'has' method for this field will now return false */
  public void clearServiceName() {
    genClient.clear(CacheKey.serviceName);
  }
  /** Clears the 'displayName' field, the 'has' method for this field will now return false */
  public void clearDisplayName() {
    genClient.clear(CacheKey.displayName);
  }
  /** Clears the 'priority' field, the 'has' method for this field will now return false */
  public void clearPriority() {
    genClient.clear(CacheKey.priority);
  }


  /**
   * Returns true if this instance has any changes.
   */
  public boolean containsChanges() {
    return genClient.containsChanges();
  }

  /**
   * Reset the log of changes made to this instance, calling copyChanges() after this would return an empty instance.
   */
  public void resetChangeLog() {
    genClient.resetChangeLog();
  }

  /**
   * Create a copy of this instance that contains only fields that were set after the constructor was called.
   */
  public RTDProviderInfo copyChanges() {
    RTDProviderInfo copy = new RTDProviderInfo();
    copy.mergeChanges(this);
    copy.resetChangeLog();
    return copy;
  }

  /**
   * Copy all the changed fields from the given source to this instance.
   */
  public void mergeChanges(RTDProviderInfo src) {
    if (src.genClient.getChangeLog() != null) {
      genClient.mergeChanges(new RTDProviderInfo(src).getJSONObject(), src.genClient);
    }
  }

  public static final android.os.Parcelable.Creator<RTDProviderInfo> CREATOR = new android.os.Parcelable.Creator<RTDProviderInfo>() {
    @Override
    public RTDProviderInfo createFromParcel(android.os.Parcel in) {
      RTDProviderInfo instance = new RTDProviderInfo(com.clover.sdk.v3.JsonParcelHelper.ObjectWrapper.CREATOR.createFromParcel(in).unwrap());
      instance.genClient.setBundle(in.readBundle(getClass().getClassLoader()));
      instance.genClient.setChangeLog(in.readBundle());
      return instance;
    }

    @Override
    public RTDProviderInfo[] newArray(int size) {
      return new RTDProviderInfo[size];
    }
  };

  public static final com.clover.sdk.JSONifiable.Creator<RTDProviderInfo> JSON_CREATOR = new com.clover.sdk.JSONifiable.Creator<RTDProviderInfo>() {
    public Class<RTDProviderInfo> getCreatedClass() {
      return RTDProviderInfo.class;
    }

    @Override
    public RTDProviderInfo create(org.json.JSONObject jsonObject) {
      return new RTDProviderInfo(jsonObject);
    }
  };

  public interface Constraints {
    public static final boolean PACKAGENAME_IS_REQUIRED = false;
    public static final boolean SERVICENAME_IS_REQUIRED = false;
    public static final boolean DISPLAYNAME_IS_REQUIRED = false;
    public static final boolean PRIORITY_IS_REQUIRED = false;
  }

}
