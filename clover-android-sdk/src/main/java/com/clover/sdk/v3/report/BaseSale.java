/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */

/*
 * Copyright (C) 2019 Clover Network, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.clover.sdk.v3.report;

import com.clover.sdk.GenericClient;
import com.clover.sdk.GenericParcelable;

/**
 * This is an auto-generated Clover data object.
 * <p>
 * <h3>Fields</h3>
 * <ul>
 * <li>{@link #getName name}</li>
 * <li>{@link #getNumberSold numberSold}</li>
 * <li>{@link #getRevenueSold revenueSold}</li>
 * <li>{@link #getNumNonRevenueSold numNonRevenueSold}</li>
 * <li>{@link #getPriceSold priceSold}</li>
 * </ul>
 */
@SuppressWarnings("all")
public class BaseSale extends GenericParcelable implements com.clover.sdk.v3.Validator, com.clover.sdk.JSONifiable {

  public java.lang.String getName() {
    return genClient.cacheGet(CacheKey.name);
  }

  public java.lang.Double getNumberSold() {
    return genClient.cacheGet(CacheKey.numberSold);
  }

  public java.lang.Long getRevenueSold() {
    return genClient.cacheGet(CacheKey.revenueSold);
  }

  public java.lang.Double getNumNonRevenueSold() {
    return genClient.cacheGet(CacheKey.numNonRevenueSold);
  }

  public java.lang.Double getPriceSold() {
    return genClient.cacheGet(CacheKey.priceSold);
  }




  private enum CacheKey implements com.clover.sdk.ExtractionStrategyEnum {
    name
        (com.clover.sdk.extractors.BasicExtractionStrategy.instance(java.lang.String.class)),
    numberSold
        (com.clover.sdk.extractors.BasicExtractionStrategy.instance(java.lang.Double.class)),
    revenueSold
        (com.clover.sdk.extractors.BasicExtractionStrategy.instance(java.lang.Long.class)),
    numNonRevenueSold
        (com.clover.sdk.extractors.BasicExtractionStrategy.instance(java.lang.Double.class)),
    priceSold
        (com.clover.sdk.extractors.BasicExtractionStrategy.instance(java.lang.Double.class)),
      ;

    private final com.clover.sdk.extractors.ExtractionStrategy extractionStrategy;

    private CacheKey(com.clover.sdk.extractors.ExtractionStrategy s) {
      extractionStrategy = s;
    }

    @Override
    public com.clover.sdk.extractors.ExtractionStrategy getExtractionStrategy() {
      return extractionStrategy;
    }
  }

  private final GenericClient<BaseSale> genClient;

  /**
   * Constructs a new empty instance.
   */
  public BaseSale() {
    genClient = new GenericClient<BaseSale>(this);
  }

  @Override
  protected GenericClient getGenericClient() {
    return genClient;
  }

  /**
   * Constructs a new empty instance.
   */
  protected BaseSale(boolean noInit) {
    genClient = null;
  }

  /**
   * Constructs a new instance from the given JSON String.
   */
  public BaseSale(String json) throws IllegalArgumentException {
    this();
    genClient.initJsonObject(json);
  }

  /**
   * Construct a new instance backed by the given JSONObject, the parameter is not copied so changes to it will be
   * reflected in this instance and vice-versa.
   */
  public BaseSale(org.json.JSONObject jsonObject) {
    this();
    genClient.setJsonObject(jsonObject);
  }

  /**
   * Constructs a new instance that is a deep copy of the source instance. It does not copy the bundle or changelog.
   */
  public BaseSale(BaseSale src) {
    this();
    if (src.genClient.getJsonObject() != null) {
      genClient.setJsonObject(com.clover.sdk.v3.JsonHelper.deepCopy(src.genClient.getJSONObject()));
    }
  }

  /**
   * Returns the internal JSONObject backing this instance, the return value is not a copy so changes to it will be
   * reflected in this instance and vice-versa.
   */
  public org.json.JSONObject getJSONObject() {
    return genClient.getJSONObject();
  }

  @Override
  public void validate() {
  }

  /** Checks whether the 'name' field is set and is not null */
  public boolean isNotNullName() {
    return genClient.cacheValueIsNotNull(CacheKey.name);
  }

  /** Checks whether the 'numberSold' field is set and is not null */
  public boolean isNotNullNumberSold() {
    return genClient.cacheValueIsNotNull(CacheKey.numberSold);
  }

  /** Checks whether the 'revenueSold' field is set and is not null */
  public boolean isNotNullRevenueSold() {
    return genClient.cacheValueIsNotNull(CacheKey.revenueSold);
  }

  /** Checks whether the 'numNonRevenueSold' field is set and is not null */
  public boolean isNotNullNumNonRevenueSold() {
    return genClient.cacheValueIsNotNull(CacheKey.numNonRevenueSold);
  }

  /** Checks whether the 'priceSold' field is set and is not null */
  public boolean isNotNullPriceSold() {
    return genClient.cacheValueIsNotNull(CacheKey.priceSold);
  }



  /** Checks whether the 'name' field has been set, however the value could be null */
  public boolean hasName() {
    return genClient.cacheHasKey(CacheKey.name);
  }

  /** Checks whether the 'numberSold' field has been set, however the value could be null */
  public boolean hasNumberSold() {
    return genClient.cacheHasKey(CacheKey.numberSold);
  }

  /** Checks whether the 'revenueSold' field has been set, however the value could be null */
  public boolean hasRevenueSold() {
    return genClient.cacheHasKey(CacheKey.revenueSold);
  }

  /** Checks whether the 'numNonRevenueSold' field has been set, however the value could be null */
  public boolean hasNumNonRevenueSold() {
    return genClient.cacheHasKey(CacheKey.numNonRevenueSold);
  }

  /** Checks whether the 'priceSold' field has been set, however the value could be null */
  public boolean hasPriceSold() {
    return genClient.cacheHasKey(CacheKey.priceSold);
  }


  /**
   * Sets the field 'name'.
   */
  public BaseSale setName(java.lang.String name) {
    return genClient.setOther(name, CacheKey.name);
  }

  /**
   * Sets the field 'numberSold'.
   */
  public BaseSale setNumberSold(java.lang.Double numberSold) {
    return genClient.setOther(numberSold, CacheKey.numberSold);
  }

  /**
   * Sets the field 'revenueSold'.
   */
  public BaseSale setRevenueSold(java.lang.Long revenueSold) {
    return genClient.setOther(revenueSold, CacheKey.revenueSold);
  }

  /**
   * Sets the field 'numNonRevenueSold'.
   */
  public BaseSale setNumNonRevenueSold(java.lang.Double numNonRevenueSold) {
    return genClient.setOther(numNonRevenueSold, CacheKey.numNonRevenueSold);
  }

  /**
   * Sets the field 'priceSold'.
   */
  public BaseSale setPriceSold(java.lang.Double priceSold) {
    return genClient.setOther(priceSold, CacheKey.priceSold);
  }


  /** Clears the 'name' field, the 'has' method for this field will now return false */
  public void clearName() {
    genClient.clear(CacheKey.name);
  }
  /** Clears the 'numberSold' field, the 'has' method for this field will now return false */
  public void clearNumberSold() {
    genClient.clear(CacheKey.numberSold);
  }
  /** Clears the 'revenueSold' field, the 'has' method for this field will now return false */
  public void clearRevenueSold() {
    genClient.clear(CacheKey.revenueSold);
  }
  /** Clears the 'numNonRevenueSold' field, the 'has' method for this field will now return false */
  public void clearNumNonRevenueSold() {
    genClient.clear(CacheKey.numNonRevenueSold);
  }
  /** Clears the 'priceSold' field, the 'has' method for this field will now return false */
  public void clearPriceSold() {
    genClient.clear(CacheKey.priceSold);
  }


  /**
   * Returns true if this instance has any changes.
   */
  public boolean containsChanges() {
    return genClient.containsChanges();
  }

  /**
   * Reset the log of changes made to this instance, calling copyChanges() after this would return an empty instance.
   */
  public void resetChangeLog() {
    genClient.resetChangeLog();
  }

  /**
   * Create a copy of this instance that contains only fields that were set after the constructor was called.
   */
  public BaseSale copyChanges() {
    BaseSale copy = new BaseSale();
    copy.mergeChanges(this);
    copy.resetChangeLog();
    return copy;
  }

  /**
   * Copy all the changed fields from the given source to this instance.
   */
  public void mergeChanges(BaseSale src) {
    if (src.genClient.getChangeLog() != null) {
      genClient.mergeChanges(new BaseSale(src).getJSONObject(), src.genClient);
    }
  }

  public static final android.os.Parcelable.Creator<BaseSale> CREATOR = new android.os.Parcelable.Creator<BaseSale>() {
    @Override
    public BaseSale createFromParcel(android.os.Parcel in) {
      BaseSale instance = new BaseSale(com.clover.sdk.v3.JsonParcelHelper.ObjectWrapper.CREATOR.createFromParcel(in).unwrap());
      instance.genClient.setBundle(in.readBundle(getClass().getClassLoader()));
      instance.genClient.setChangeLog(in.readBundle());
      return instance;
    }

    @Override
    public BaseSale[] newArray(int size) {
      return new BaseSale[size];
    }
  };

  public static final com.clover.sdk.JSONifiable.Creator<BaseSale> JSON_CREATOR = new com.clover.sdk.JSONifiable.Creator<BaseSale>() {
    public Class<BaseSale> getCreatedClass() {
      return BaseSale.class;
    }

    @Override
    public BaseSale create(org.json.JSONObject jsonObject) {
      return new BaseSale(jsonObject);
    }
  };

  public interface Constraints {
    public static final boolean NAME_IS_REQUIRED = false;
    public static final boolean NUMBERSOLD_IS_REQUIRED = false;
    public static final boolean REVENUESOLD_IS_REQUIRED = false;
    public static final boolean NUMNONREVENUESOLD_IS_REQUIRED = false;
    public static final boolean PRICESOLD_IS_REQUIRED = false;
  }

}
