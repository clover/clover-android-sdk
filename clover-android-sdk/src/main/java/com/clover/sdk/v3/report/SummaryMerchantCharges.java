/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */

/*
 * Copyright (C) 2019 Clover Network, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.clover.sdk.v3.report;

import com.clover.sdk.GenericClient;
import com.clover.sdk.GenericParcelable;

/**
 * This is an auto-generated Clover data object.
 * <p>
 * <h3>Fields</h3>
 * <ul>
 * <li>{@link #getCurrency currency}</li>
 * <li>{@link #getNum num}</li>
 * <li>{@link #getTotalAmount totalAmount}</li>
 * <li>{@link #getTotalTax totalTax}</li>
 * <li>{@link #getTotalDeveloperPortion totalDeveloperPortion}</li>
 * <li>{@link #getNumOfMerchants numOfMerchants}</li>
 * </ul>
 */
@SuppressWarnings("all")
public class SummaryMerchantCharges extends GenericParcelable implements com.clover.sdk.v3.Validator, com.clover.sdk.JSONifiable {

  public java.lang.String getCurrency() {
    return genClient.cacheGet(CacheKey.currency);
  }

  public java.lang.Long getNum() {
    return genClient.cacheGet(CacheKey.num);
  }

  public java.lang.Long getTotalAmount() {
    return genClient.cacheGet(CacheKey.totalAmount);
  }

  public java.lang.Long getTotalTax() {
    return genClient.cacheGet(CacheKey.totalTax);
  }

  public java.lang.Long getTotalDeveloperPortion() {
    return genClient.cacheGet(CacheKey.totalDeveloperPortion);
  }

  public java.lang.Integer getNumOfMerchants() {
    return genClient.cacheGet(CacheKey.numOfMerchants);
  }




  private enum CacheKey implements com.clover.sdk.ExtractionStrategyEnum {
    currency
        (com.clover.sdk.extractors.BasicExtractionStrategy.instance(java.lang.String.class)),
    num
        (com.clover.sdk.extractors.BasicExtractionStrategy.instance(java.lang.Long.class)),
    totalAmount
        (com.clover.sdk.extractors.BasicExtractionStrategy.instance(java.lang.Long.class)),
    totalTax
        (com.clover.sdk.extractors.BasicExtractionStrategy.instance(java.lang.Long.class)),
    totalDeveloperPortion
        (com.clover.sdk.extractors.BasicExtractionStrategy.instance(java.lang.Long.class)),
    numOfMerchants
        (com.clover.sdk.extractors.BasicExtractionStrategy.instance(java.lang.Integer.class)),
      ;

    private final com.clover.sdk.extractors.ExtractionStrategy extractionStrategy;

    private CacheKey(com.clover.sdk.extractors.ExtractionStrategy s) {
      extractionStrategy = s;
    }

    @Override
    public com.clover.sdk.extractors.ExtractionStrategy getExtractionStrategy() {
      return extractionStrategy;
    }
  }

  private final GenericClient<SummaryMerchantCharges> genClient;

  /**
   * Constructs a new empty instance.
   */
  public SummaryMerchantCharges() {
    genClient = new GenericClient<SummaryMerchantCharges>(this);
  }

  @Override
  protected GenericClient getGenericClient() {
    return genClient;
  }

  /**
   * Constructs a new empty instance.
   */
  protected SummaryMerchantCharges(boolean noInit) {
    genClient = null;
  }

  /**
   * Constructs a new instance from the given JSON String.
   */
  public SummaryMerchantCharges(String json) throws IllegalArgumentException {
    this();
    genClient.initJsonObject(json);
  }

  /**
   * Construct a new instance backed by the given JSONObject, the parameter is not copied so changes to it will be
   * reflected in this instance and vice-versa.
   */
  public SummaryMerchantCharges(org.json.JSONObject jsonObject) {
    this();
    genClient.setJsonObject(jsonObject);
  }

  /**
   * Constructs a new instance that is a deep copy of the source instance. It does not copy the bundle or changelog.
   */
  public SummaryMerchantCharges(SummaryMerchantCharges src) {
    this();
    if (src.genClient.getJsonObject() != null) {
      genClient.setJsonObject(com.clover.sdk.v3.JsonHelper.deepCopy(src.genClient.getJSONObject()));
    }
  }

  /**
   * Returns the internal JSONObject backing this instance, the return value is not a copy so changes to it will be
   * reflected in this instance and vice-versa.
   */
  public org.json.JSONObject getJSONObject() {
    return genClient.getJSONObject();
  }

  @Override
  public void validate() {
  }

  /** Checks whether the 'currency' field is set and is not null */
  public boolean isNotNullCurrency() {
    return genClient.cacheValueIsNotNull(CacheKey.currency);
  }

  /** Checks whether the 'num' field is set and is not null */
  public boolean isNotNullNum() {
    return genClient.cacheValueIsNotNull(CacheKey.num);
  }

  /** Checks whether the 'totalAmount' field is set and is not null */
  public boolean isNotNullTotalAmount() {
    return genClient.cacheValueIsNotNull(CacheKey.totalAmount);
  }

  /** Checks whether the 'totalTax' field is set and is not null */
  public boolean isNotNullTotalTax() {
    return genClient.cacheValueIsNotNull(CacheKey.totalTax);
  }

  /** Checks whether the 'totalDeveloperPortion' field is set and is not null */
  public boolean isNotNullTotalDeveloperPortion() {
    return genClient.cacheValueIsNotNull(CacheKey.totalDeveloperPortion);
  }

  /** Checks whether the 'numOfMerchants' field is set and is not null */
  public boolean isNotNullNumOfMerchants() {
    return genClient.cacheValueIsNotNull(CacheKey.numOfMerchants);
  }



  /** Checks whether the 'currency' field has been set, however the value could be null */
  public boolean hasCurrency() {
    return genClient.cacheHasKey(CacheKey.currency);
  }

  /** Checks whether the 'num' field has been set, however the value could be null */
  public boolean hasNum() {
    return genClient.cacheHasKey(CacheKey.num);
  }

  /** Checks whether the 'totalAmount' field has been set, however the value could be null */
  public boolean hasTotalAmount() {
    return genClient.cacheHasKey(CacheKey.totalAmount);
  }

  /** Checks whether the 'totalTax' field has been set, however the value could be null */
  public boolean hasTotalTax() {
    return genClient.cacheHasKey(CacheKey.totalTax);
  }

  /** Checks whether the 'totalDeveloperPortion' field has been set, however the value could be null */
  public boolean hasTotalDeveloperPortion() {
    return genClient.cacheHasKey(CacheKey.totalDeveloperPortion);
  }

  /** Checks whether the 'numOfMerchants' field has been set, however the value could be null */
  public boolean hasNumOfMerchants() {
    return genClient.cacheHasKey(CacheKey.numOfMerchants);
  }


  /**
   * Sets the field 'currency'.
   */
  public SummaryMerchantCharges setCurrency(java.lang.String currency) {
    return genClient.setOther(currency, CacheKey.currency);
  }

  /**
   * Sets the field 'num'.
   */
  public SummaryMerchantCharges setNum(java.lang.Long num) {
    return genClient.setOther(num, CacheKey.num);
  }

  /**
   * Sets the field 'totalAmount'.
   */
  public SummaryMerchantCharges setTotalAmount(java.lang.Long totalAmount) {
    return genClient.setOther(totalAmount, CacheKey.totalAmount);
  }

  /**
   * Sets the field 'totalTax'.
   */
  public SummaryMerchantCharges setTotalTax(java.lang.Long totalTax) {
    return genClient.setOther(totalTax, CacheKey.totalTax);
  }

  /**
   * Sets the field 'totalDeveloperPortion'.
   */
  public SummaryMerchantCharges setTotalDeveloperPortion(java.lang.Long totalDeveloperPortion) {
    return genClient.setOther(totalDeveloperPortion, CacheKey.totalDeveloperPortion);
  }

  /**
   * Sets the field 'numOfMerchants'.
   */
  public SummaryMerchantCharges setNumOfMerchants(java.lang.Integer numOfMerchants) {
    return genClient.setOther(numOfMerchants, CacheKey.numOfMerchants);
  }


  /** Clears the 'currency' field, the 'has' method for this field will now return false */
  public void clearCurrency() {
    genClient.clear(CacheKey.currency);
  }
  /** Clears the 'num' field, the 'has' method for this field will now return false */
  public void clearNum() {
    genClient.clear(CacheKey.num);
  }
  /** Clears the 'totalAmount' field, the 'has' method for this field will now return false */
  public void clearTotalAmount() {
    genClient.clear(CacheKey.totalAmount);
  }
  /** Clears the 'totalTax' field, the 'has' method for this field will now return false */
  public void clearTotalTax() {
    genClient.clear(CacheKey.totalTax);
  }
  /** Clears the 'totalDeveloperPortion' field, the 'has' method for this field will now return false */
  public void clearTotalDeveloperPortion() {
    genClient.clear(CacheKey.totalDeveloperPortion);
  }
  /** Clears the 'numOfMerchants' field, the 'has' method for this field will now return false */
  public void clearNumOfMerchants() {
    genClient.clear(CacheKey.numOfMerchants);
  }


  /**
   * Returns true if this instance has any changes.
   */
  public boolean containsChanges() {
    return genClient.containsChanges();
  }

  /**
   * Reset the log of changes made to this instance, calling copyChanges() after this would return an empty instance.
   */
  public void resetChangeLog() {
    genClient.resetChangeLog();
  }

  /**
   * Create a copy of this instance that contains only fields that were set after the constructor was called.
   */
  public SummaryMerchantCharges copyChanges() {
    SummaryMerchantCharges copy = new SummaryMerchantCharges();
    copy.mergeChanges(this);
    copy.resetChangeLog();
    return copy;
  }

  /**
   * Copy all the changed fields from the given source to this instance.
   */
  public void mergeChanges(SummaryMerchantCharges src) {
    if (src.genClient.getChangeLog() != null) {
      genClient.mergeChanges(new SummaryMerchantCharges(src).getJSONObject(), src.genClient);
    }
  }

  public static final android.os.Parcelable.Creator<SummaryMerchantCharges> CREATOR = new android.os.Parcelable.Creator<SummaryMerchantCharges>() {
    @Override
    public SummaryMerchantCharges createFromParcel(android.os.Parcel in) {
      SummaryMerchantCharges instance = new SummaryMerchantCharges(com.clover.sdk.v3.JsonParcelHelper.ObjectWrapper.CREATOR.createFromParcel(in).unwrap());
      instance.genClient.setBundle(in.readBundle(getClass().getClassLoader()));
      instance.genClient.setChangeLog(in.readBundle());
      return instance;
    }

    @Override
    public SummaryMerchantCharges[] newArray(int size) {
      return new SummaryMerchantCharges[size];
    }
  };

  public static final com.clover.sdk.JSONifiable.Creator<SummaryMerchantCharges> JSON_CREATOR = new com.clover.sdk.JSONifiable.Creator<SummaryMerchantCharges>() {
    public Class<SummaryMerchantCharges> getCreatedClass() {
      return SummaryMerchantCharges.class;
    }

    @Override
    public SummaryMerchantCharges create(org.json.JSONObject jsonObject) {
      return new SummaryMerchantCharges(jsonObject);
    }
  };

  public interface Constraints {
    public static final boolean CURRENCY_IS_REQUIRED = false;
    public static final boolean NUM_IS_REQUIRED = false;
    public static final boolean TOTALAMOUNT_IS_REQUIRED = false;
    public static final boolean TOTALTAX_IS_REQUIRED = false;
    public static final boolean TOTALDEVELOPERPORTION_IS_REQUIRED = false;
    public static final boolean NUMOFMERCHANTS_IS_REQUIRED = false;
  }

}
