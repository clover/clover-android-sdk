/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */


/*
 * Copyright (C) 2016 Clover Network, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.clover.sdk.v3.remotemessage;

import com.clover.sdk.GenericClient;

/**
 * This is an auto-generated Clover data object.
 * <p>
 * Errors that are encountered that cannot be recovered from are passed using this class.  This is intended to be used to aid integrators and Clover support in troubleshooting systems integration with devices.
 * <p>
 * <h3>Fields</h3>
 * <ul>
 * <li>{@link #getErrorDetail errorDetail}</li>
 * <li>{@link #getErrorMessage errorMessage}</li>
 * <li>{@link #getErrorCode errorCode}</li>
 * </ul>
 */
@SuppressWarnings("all")
public class RemoteError extends com.clover.sdk.v3.remotemessage.Message {

  /**
   * Detailed information on the error.  This is engineering information for troubleshooting.
   */
  public java.lang.String getErrorDetail() {
    return genClient.cacheGet(CacheKey.errorDetail);
  }

  /**
   * A concise description of the error
   */
  public java.lang.String getErrorMessage() {
    return genClient.cacheGet(CacheKey.errorMessage);
  }

  /**
   * If available, the code for the error encountered.
   */
  public java.lang.Long getErrorCode() {
    return genClient.cacheGet(CacheKey.errorCode);
  }

  /**
   * The list of message types
   */
  @Override
  public com.clover.sdk.v3.remotemessage.Method getMethod() {
    return genClient.cacheGet(CacheKey.method);
  }

  /**
   * The version of this message
   */
  @Override
  public java.lang.Integer getVersion() {
    return genClient.cacheGet(CacheKey.version);
  }




  private enum CacheKey implements com.clover.sdk.ValueExtractorEnum<RemoteError> {
    errorDetail {
      @Override
      public Object extractValue(RemoteError instance) {
        return instance.genClient.extractOther("errorDetail", java.lang.String.class);
      }
    },
    errorMessage {
      @Override
      public Object extractValue(RemoteError instance) {
        return instance.genClient.extractOther("errorMessage", java.lang.String.class);
      }
    },
    errorCode {
      @Override
      public Object extractValue(RemoteError instance) {
        return instance.genClient.extractOther("errorCode", java.lang.Long.class);
      }
    },
    method {
      @Override
      public Object extractValue(RemoteError instance) {
        return instance.genClient.extractEnum("method", com.clover.sdk.v3.remotemessage.Method.class);
      }
    },
    version {
      @Override
      public Object extractValue(RemoteError instance) {
        return instance.genClient.extractOther("version", java.lang.Integer.class);
      }
    },
      ;
  }

  private GenericClient<RemoteError> genClient;

  /**
  * Constructs a new empty instance.
  */
  public RemoteError() {
    super(false);
    genClient = new GenericClient<RemoteError>(this);
    this.setMethod(com.clover.sdk.v3.remotemessage.Method.REMOTE_ERROR);
  }

  @Override
  protected GenericClient getGenericClient() {
    return genClient;
  }

  /**
  * Constructs a new empty instance.
  */
  protected RemoteError(boolean noInit) {
    super(false);
    genClient = null;
  }

  /**
   * Constructs a new instance from the given JSON String.
   */
  public RemoteError(String json) throws IllegalArgumentException {
    this();
    try {
      genClient.setJsonObject(new org.json.JSONObject(json));
    } catch (org.json.JSONException e) {
      throw new IllegalArgumentException("invalid json", e);
    }
  }

  /**
   * Construct a new instance backed by the given JSONObject, the parameter is not copied so changes to it will be
   * reflected in this instance and vice-versa.
   */
  public RemoteError(org.json.JSONObject jsonObject) {
    this();
    genClient.setJsonObject(jsonObject);
  }

  /**
   * Constructs a new instance that is a deep copy of the source instance. It does not copy the bundle or changelog.
   */
  public RemoteError(RemoteError src) {
    this();
    if (src.genClient.getJsonObject() != null) {
      genClient.setJsonObject(com.clover.sdk.v3.JsonHelper.deepCopy(src.genClient.getJSONObject()));
    }
  }

  /**
   * Returns the internal JSONObject backing this instance, the return value is not a copy so changes to it will be
   * reflected in this instance and vice-versa.
   */
  public org.json.JSONObject getJSONObject() {
    return genClient.getJSONObject();
  }

  @Override
  public void validate() {

    genClient.validateLength(getErrorMessage(), 13);
  }

  /** Checks whether the 'errorDetail' field is set and is not null */
  public boolean isNotNullErrorDetail() {
    return genClient.cacheValueIsNotNull(CacheKey.errorDetail);
  }

  /** Checks whether the 'errorMessage' field is set and is not null */
  public boolean isNotNullErrorMessage() {
    return genClient.cacheValueIsNotNull(CacheKey.errorMessage);
  }

  /** Checks whether the 'errorCode' field is set and is not null */
  public boolean isNotNullErrorCode() {
    return genClient.cacheValueIsNotNull(CacheKey.errorCode);
  }

  /** Checks whether the 'method' field is set and is not null */
  @Override
  public boolean isNotNullMethod() {
    return genClient.cacheValueIsNotNull(CacheKey.method);
  }

  /** Checks whether the 'version' field is set and is not null */
  @Override
  public boolean isNotNullVersion() {
    return genClient.cacheValueIsNotNull(CacheKey.version);
  }



  /** Checks whether the 'errorDetail' field has been set, however the value could be null */
  public boolean hasErrorDetail() {
    return genClient.cacheHasKey(CacheKey.errorDetail);
  }

  /** Checks whether the 'errorMessage' field has been set, however the value could be null */
  public boolean hasErrorMessage() {
    return genClient.cacheHasKey(CacheKey.errorMessage);
  }

  /** Checks whether the 'errorCode' field has been set, however the value could be null */
  public boolean hasErrorCode() {
    return genClient.cacheHasKey(CacheKey.errorCode);
  }

  /** Checks whether the 'method' field has been set, however the value could be null */
  @Override
  public boolean hasMethod() {
    return genClient.cacheHasKey(CacheKey.method);
  }

  /** Checks whether the 'version' field has been set, however the value could be null */
  @Override
  public boolean hasVersion() {
    return genClient.cacheHasKey(CacheKey.version);
  }


  /**
   * Sets the field 'errorDetail'.
   */
  public RemoteError setErrorDetail(java.lang.String errorDetail) {
    return genClient.setOther(errorDetail, CacheKey.errorDetail);
  }

  /**
   * Sets the field 'errorMessage'.
   */
  public RemoteError setErrorMessage(java.lang.String errorMessage) {
    return genClient.setOther(errorMessage, CacheKey.errorMessage);
  }

  /**
   * Sets the field 'errorCode'.
   */
  public RemoteError setErrorCode(java.lang.Long errorCode) {
    return genClient.setOther(errorCode, CacheKey.errorCode);
  }

  /**
   * Sets the field 'method'.
   */
  @Override
  public Message setMethod(com.clover.sdk.v3.remotemessage.Method method) {
    return genClient.setOther(method, CacheKey.method);
  }

  /**
   * Sets the field 'version'.
   */
  @Override
  public Message setVersion(java.lang.Integer version) {
    return genClient.setOther(version, CacheKey.version);
  }


  /** Clears the 'errorDetail' field, the 'has' method for this field will now return false */
  public void clearErrorDetail() {
    genClient.clear(CacheKey.errorDetail);
  }
  /** Clears the 'errorMessage' field, the 'has' method for this field will now return false */
  public void clearErrorMessage() {
    genClient.clear(CacheKey.errorMessage);
  }
  /** Clears the 'errorCode' field, the 'has' method for this field will now return false */
  public void clearErrorCode() {
    genClient.clear(CacheKey.errorCode);
  }
  /** Clears the 'method' field, the 'has' method for this field will now return false */
  @Override
  public void clearMethod() {
    genClient.clear(CacheKey.method);
  }
  /** Clears the 'version' field, the 'has' method for this field will now return false */
  @Override
  public void clearVersion() {
    genClient.clear(CacheKey.version);
  }


  /**
   * Returns true if this instance has any changes.
   */
  public boolean containsChanges() {
    return genClient.containsChanges();
  }

  /**
   * Reset the log of changes made to this instance, calling copyChanges() after this would return an empty instance.
   */
  public void resetChangeLog() {
    genClient.resetChangeLog();
  }

  /**
   * Create a copy of this instance that contains only fields that were set after the constructor was called.
   */
  public RemoteError copyChanges() {
    RemoteError copy = new RemoteError();
    copy.mergeChanges(this);
    copy.resetChangeLog();
    return copy;
  }

  /**
   * Copy all the changed fields from the given source to this instance.
   */
  public void mergeChanges(RemoteError src) {
    if (src.genClient.getChangeLog() != null) {
      genClient.mergeChanges(new RemoteError(src).getJSONObject(), src.genClient);
    }
  }

  public static final android.os.Parcelable.Creator<RemoteError> CREATOR = new android.os.Parcelable.Creator<RemoteError>() {
    @Override
    public RemoteError createFromParcel(android.os.Parcel in) {
      RemoteError instance = new RemoteError(com.clover.sdk.v3.JsonParcelHelper.ObjectWrapper.CREATOR.createFromParcel(in).unwrap());
      instance.genClient.setBundle(in.readBundle(getClass().getClassLoader()));
      instance.genClient.setChangeLog(in.readBundle());
      return instance;
    }

    @Override
    public RemoteError[] newArray(int size) {
      return new RemoteError[size];
    }
  };

  public static final com.clover.sdk.JSONifiable.Creator<RemoteError> JSON_CREATOR = new com.clover.sdk.JSONifiable.Creator<RemoteError>() {
    @Override
    public RemoteError create(org.json.JSONObject jsonObject) {
      return new RemoteError(jsonObject);
    }
  };

  public interface Constraints {

    public static final boolean ERRORDETAIL_IS_REQUIRED = false;
    public static final boolean ERRORMESSAGE_IS_REQUIRED = false;
    public static final long ERRORMESSAGE_MAX_LEN = 13;
    public static final boolean ERRORCODE_IS_REQUIRED = false;
    public static final boolean METHOD_IS_REQUIRED = false;
    public static final boolean VERSION_IS_REQUIRED = false;

  }

}
