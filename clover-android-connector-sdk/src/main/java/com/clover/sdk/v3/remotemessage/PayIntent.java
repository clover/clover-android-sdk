/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */


/*
 * Copyright (C) 2016 Clover Network, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.clover.sdk.v3.remotemessage;

import com.clover.sdk.GenericClient;
import com.clover.sdk.GenericParcelable;

/**
 * This is an auto-generated Clover data object.
 * <p>
 * <h3>Fields</h3>
 * <ul>
 * <li>{@link #getAction action}</li>
 * <li>{@link #getAmount amount}</li>
 * <li>{@link #getTippableAmount tippableAmount}</li>
 * <li>{@link #getTipAmount tipAmount}</li>
 * <li>{@link #getTaxAmount taxAmount}</li>
 * <li>{@link #getOrderId orderId}</li>
 * <li>{@link #getPaymentId paymentId}</li>
 * <li>{@link #getEmployeeId employeeId}</li>
 * <li>{@link #getTransactionType transactionType}</li>
 * <li>{@link #getTaxableAmountRates taxableAmountRates}</li>
 * <li>{@link #getServiceChargeAmount serviceChargeAmount}</li>
 * <li>{@link #getIsDisableCashBack isDisableCashBack}</li>
 * <li>{@link #getIsTesting isTesting}</li>
 * <li>{@link #getCardEntryMethods cardEntryMethods}</li>
 * <li>{@link #getVoiceAuthCode voiceAuthCode}</li>
 * <li>{@link #getStreetAddress streetAddress}</li>
 * <li>{@link #getPostalCode postalCode}</li>
 * <li>{@link #getIsCardNotPresent isCardNotPresent}</li>
 * <li>{@link #getCardDataMessage cardDataMessage}</li>
 * <li>{@link #getRemotePrint remotePrint}</li>
 * <li>{@link #getTransactionNo transactionNo}</li>
 * <li>{@link #getIsForceSwipePinEntry isForceSwipePinEntry}</li>
 * <li>{@link #getDisableRestartTransactionWhenFailed disableRestartTransactionWhenFailed}</li>
 * <li>{@link #getExternalPaymentId externalPaymentId}</li>
 * <li>{@link #getVaultedCard vaultedCard}</li>
 * <li>{@link #getAllowOfflinePayment allowOfflinePayment}</li>
 * <li>{@link #getApproveOfflinePaymentWithoutPrompt approveOfflinePaymentWithoutPrompt}</li>
 * <li>{@link #getRequiresRemoteConfirmation requiresRemoteConfirmation}</li>
 * <li>{@link #getApplicationTracking applicationTracking}</li>
 * <li>{@link #getAllowPartialAuth allowPartialAuth}</li>
 * <li>{@link #getGermanInfo germanInfo}</li>
 * <li>{@link #getCashAdvanceCustomerIdentification cashAdvanceCustomerIdentification}</li>
 * <li>{@link #getTransactionSettings transactionSettings}</li>
 * </ul>
 */
@SuppressWarnings("all")
public class PayIntent extends GenericParcelable implements com.clover.sdk.v3.Validator, com.clover.sdk.JSONifiable {

  /**
   * The action to fire in the device (com.clover.remote.protocol.action.START_REMOTE_PROTOCOL_PAY)
   */
  public java.lang.String getAction() {
    return genClient.cacheGet(CacheKey.action);
  }

  /**
   * Amount for transaction
   */
  public java.lang.Long getAmount() {
    return genClient.cacheGet(CacheKey.amount);
  }

  /**
   * Amount used when calculating on screen tips
   */
  public java.lang.Long getTippableAmount() {
    return genClient.cacheGet(CacheKey.tippableAmount);
  }

  /**
   * Amount paid in tips
   */
  public java.lang.Long getTipAmount() {
    return genClient.cacheGet(CacheKey.tipAmount);
  }

  public java.lang.Long getTaxAmount() {
    return genClient.cacheGet(CacheKey.taxAmount);
  }

  /**
   * Unique identifier for a order
   */
  public java.lang.String getOrderId() {
    return genClient.cacheGet(CacheKey.orderId);
  }

  /**
   * Unique identifier for a payment
   */
  public java.lang.String getPaymentId() {
    return genClient.cacheGet(CacheKey.paymentId);
  }

  /**
   * Unique identifier for a employee
   */
  public java.lang.String getEmployeeId() {
    return genClient.cacheGet(CacheKey.employeeId);
  }

  public com.clover.sdk.v3.remotemessage.TransactionType getTransactionType() {
    return genClient.cacheGet(CacheKey.transactionType);
  }

  public java.util.List<com.clover.sdk.v3.payments.TaxableAmountRate> getTaxableAmountRates() {
    return genClient.cacheGet(CacheKey.taxableAmountRates);
  }

  public java.util.List<com.clover.sdk.v3.payments.ServiceChargeAmount> getServiceChargeAmount() {
    return genClient.cacheGet(CacheKey.serviceChargeAmount);
  }

  /**
   * If true, then cash back will not be offered.
   */
  public java.lang.Boolean getIsDisableCashBack() {
    return genClient.cacheGet(CacheKey.isDisableCashBack);
  }

  public java.lang.Boolean getIsTesting() {
    return genClient.cacheGet(CacheKey.isTesting);
  }

  /**
   * Allowed entry methods
   */
  public java.lang.Integer getCardEntryMethods() {
    return genClient.cacheGet(CacheKey.cardEntryMethods);
  }

  public java.lang.String getVoiceAuthCode() {
    return genClient.cacheGet(CacheKey.voiceAuthCode);
  }

  public java.lang.String getStreetAddress() {
    return genClient.cacheGet(CacheKey.streetAddress);
  }

  public java.lang.String getPostalCode() {
    return genClient.cacheGet(CacheKey.postalCode);
  }

  public java.lang.Boolean getIsCardNotPresent() {
    return genClient.cacheGet(CacheKey.isCardNotPresent);
  }

  public java.lang.String getCardDataMessage() {
    return genClient.cacheGet(CacheKey.cardDataMessage);
  }

  /**
   * If true, then the receiver of this message does NOT print
   */
  public java.lang.Boolean getRemotePrint() {
    return genClient.cacheGet(CacheKey.remotePrint);
  }

  public java.lang.String getTransactionNo() {
    return genClient.cacheGet(CacheKey.transactionNo);
  }

  public java.lang.Boolean getIsForceSwipePinEntry() {
    return genClient.cacheGet(CacheKey.isForceSwipePinEntry);
  }

  public java.lang.Boolean getDisableRestartTransactionWhenFailed() {
    return genClient.cacheGet(CacheKey.disableRestartTransactionWhenFailed);
  }

  /**
   * An id that allows an external system to link to a payment.
   */
  public java.lang.String getExternalPaymentId() {
    return genClient.cacheGet(CacheKey.externalPaymentId);
  }

  public com.clover.sdk.v3.payments.VaultedCard getVaultedCard() {
    return genClient.cacheGet(CacheKey.vaultedCard);
  }

  public java.lang.Boolean getAllowOfflinePayment() {
    return genClient.cacheGet(CacheKey.allowOfflinePayment);
  }

  public java.lang.Boolean getApproveOfflinePaymentWithoutPrompt() {
    return genClient.cacheGet(CacheKey.approveOfflinePaymentWithoutPrompt);
  }

  public java.lang.Boolean getRequiresRemoteConfirmation() {
    return genClient.cacheGet(CacheKey.requiresRemoteConfirmation);
  }

  public com.clover.sdk.v3.apps.AppTracking getApplicationTracking() {
    return genClient.cacheGet(CacheKey.applicationTracking);
  }

  public java.lang.Boolean getAllowPartialAuth() {
    return genClient.cacheGet(CacheKey.allowPartialAuth);
  }

  public com.clover.sdk.v3.payments.GermanInfo getGermanInfo() {
    return genClient.cacheGet(CacheKey.germanInfo);
  }

  public com.clover.sdk.v3.payments.CashAdvanceCustomerIdentification getCashAdvanceCustomerIdentification() {
    return genClient.cacheGet(CacheKey.cashAdvanceCustomerIdentification);
  }

  public com.clover.sdk.v3.payments.TransactionSettings getTransactionSettings() {
    return genClient.cacheGet(CacheKey.transactionSettings);
  }




  private enum CacheKey implements com.clover.sdk.ValueExtractorEnum<PayIntent> {
    action {
      @Override
      public Object extractValue(PayIntent instance) {
        return instance.genClient.extractOther("action", java.lang.String.class);
      }
    },
    amount {
      @Override
      public Object extractValue(PayIntent instance) {
        return instance.genClient.extractOther("amount", java.lang.Long.class);
      }
    },
    tippableAmount {
      @Override
      public Object extractValue(PayIntent instance) {
        return instance.genClient.extractOther("tippableAmount", java.lang.Long.class);
      }
    },
    tipAmount {
      @Override
      public Object extractValue(PayIntent instance) {
        return instance.genClient.extractOther("tipAmount", java.lang.Long.class);
      }
    },
    taxAmount {
      @Override
      public Object extractValue(PayIntent instance) {
        return instance.genClient.extractOther("taxAmount", java.lang.Long.class);
      }
    },
    orderId {
      @Override
      public Object extractValue(PayIntent instance) {
        return instance.genClient.extractOther("orderId", java.lang.String.class);
      }
    },
    paymentId {
      @Override
      public Object extractValue(PayIntent instance) {
        return instance.genClient.extractOther("paymentId", java.lang.String.class);
      }
    },
    employeeId {
      @Override
      public Object extractValue(PayIntent instance) {
        return instance.genClient.extractOther("employeeId", java.lang.String.class);
      }
    },
    transactionType {
      @Override
      public Object extractValue(PayIntent instance) {
        return instance.genClient.extractEnum("transactionType", com.clover.sdk.v3.remotemessage.TransactionType.class);
      }
    },
    taxableAmountRates {
      @Override
      public Object extractValue(PayIntent instance) {
        return instance.genClient.extractListRecord("taxableAmountRates", com.clover.sdk.v3.payments.TaxableAmountRate.JSON_CREATOR);
      }
    },
    serviceChargeAmount {
      @Override
      public Object extractValue(PayIntent instance) {
        return instance.genClient.extractListRecord("serviceChargeAmount", com.clover.sdk.v3.payments.ServiceChargeAmount.JSON_CREATOR);
      }
    },
    isDisableCashBack {
      @Override
      public Object extractValue(PayIntent instance) {
        return instance.genClient.extractOther("isDisableCashBack", java.lang.Boolean.class);
      }
    },
    isTesting {
      @Override
      public Object extractValue(PayIntent instance) {
        return instance.genClient.extractOther("isTesting", java.lang.Boolean.class);
      }
    },
    cardEntryMethods {
      @Override
      public Object extractValue(PayIntent instance) {
        return instance.genClient.extractOther("cardEntryMethods", java.lang.Integer.class);
      }
    },
    voiceAuthCode {
      @Override
      public Object extractValue(PayIntent instance) {
        return instance.genClient.extractOther("voiceAuthCode", java.lang.String.class);
      }
    },
    streetAddress {
      @Override
      public Object extractValue(PayIntent instance) {
        return instance.genClient.extractOther("streetAddress", java.lang.String.class);
      }
    },
    postalCode {
      @Override
      public Object extractValue(PayIntent instance) {
        return instance.genClient.extractOther("postalCode", java.lang.String.class);
      }
    },
    isCardNotPresent {
      @Override
      public Object extractValue(PayIntent instance) {
        return instance.genClient.extractOther("isCardNotPresent", java.lang.Boolean.class);
      }
    },
    cardDataMessage {
      @Override
      public Object extractValue(PayIntent instance) {
        return instance.genClient.extractOther("cardDataMessage", java.lang.String.class);
      }
    },
    remotePrint {
      @Override
      public Object extractValue(PayIntent instance) {
        return instance.genClient.extractOther("remotePrint", java.lang.Boolean.class);
      }
    },
    transactionNo {
      @Override
      public Object extractValue(PayIntent instance) {
        return instance.genClient.extractOther("transactionNo", java.lang.String.class);
      }
    },
    isForceSwipePinEntry {
      @Override
      public Object extractValue(PayIntent instance) {
        return instance.genClient.extractOther("isForceSwipePinEntry", java.lang.Boolean.class);
      }
    },
    disableRestartTransactionWhenFailed {
      @Override
      public Object extractValue(PayIntent instance) {
        return instance.genClient.extractOther("disableRestartTransactionWhenFailed", java.lang.Boolean.class);
      }
    },
    externalPaymentId {
      @Override
      public Object extractValue(PayIntent instance) {
        return instance.genClient.extractOther("externalPaymentId", java.lang.String.class);
      }
    },
    vaultedCard {
      @Override
      public Object extractValue(PayIntent instance) {
        return instance.genClient.extractRecord("vaultedCard", com.clover.sdk.v3.payments.VaultedCard.JSON_CREATOR);
      }
    },
    allowOfflinePayment {
      @Override
      public Object extractValue(PayIntent instance) {
        return instance.genClient.extractOther("allowOfflinePayment", java.lang.Boolean.class);
      }
    },
    approveOfflinePaymentWithoutPrompt {
      @Override
      public Object extractValue(PayIntent instance) {
        return instance.genClient.extractOther("approveOfflinePaymentWithoutPrompt", java.lang.Boolean.class);
      }
    },
    requiresRemoteConfirmation {
      @Override
      public Object extractValue(PayIntent instance) {
        return instance.genClient.extractOther("requiresRemoteConfirmation", java.lang.Boolean.class);
      }
    },
    applicationTracking {
      @Override
      public Object extractValue(PayIntent instance) {
        return instance.genClient.extractRecord("applicationTracking", com.clover.sdk.v3.apps.AppTracking.JSON_CREATOR);
      }
    },
    allowPartialAuth {
      @Override
      public Object extractValue(PayIntent instance) {
        return instance.genClient.extractOther("allowPartialAuth", java.lang.Boolean.class);
      }
    },
    germanInfo {
      @Override
      public Object extractValue(PayIntent instance) {
        return instance.genClient.extractRecord("germanInfo", com.clover.sdk.v3.payments.GermanInfo.JSON_CREATOR);
      }
    },
    cashAdvanceCustomerIdentification {
      @Override
      public Object extractValue(PayIntent instance) {
        return instance.genClient.extractRecord("cashAdvanceCustomerIdentification", com.clover.sdk.v3.payments.CashAdvanceCustomerIdentification.JSON_CREATOR);
      }
    },
    transactionSettings {
      @Override
      public Object extractValue(PayIntent instance) {
        return instance.genClient.extractRecord("transactionSettings", com.clover.sdk.v3.payments.TransactionSettings.JSON_CREATOR);
      }
    },
      ;
  }

  private GenericClient<PayIntent> genClient;

  /**
  * Constructs a new empty instance.
  */
  public PayIntent() {
    genClient = new GenericClient<PayIntent>(this);
  }

  @Override
  protected GenericClient getGenericClient() {
    return genClient;
  }

  /**
  * Constructs a new empty instance.
  */
  protected PayIntent(boolean noInit) {
    genClient = null;
  }

  /**
   * Constructs a new instance from the given JSON String.
   */
  public PayIntent(String json) throws IllegalArgumentException {
    this();
    try {
      genClient.setJsonObject(new org.json.JSONObject(json));
    } catch (org.json.JSONException e) {
      throw new IllegalArgumentException("invalid json", e);
    }
  }

  /**
   * Construct a new instance backed by the given JSONObject, the parameter is not copied so changes to it will be
   * reflected in this instance and vice-versa.
   */
  public PayIntent(org.json.JSONObject jsonObject) {
    this();
    genClient.setJsonObject(jsonObject);
  }

  /**
   * Constructs a new instance that is a deep copy of the source instance. It does not copy the bundle or changelog.
   */
  public PayIntent(PayIntent src) {
    this();
    if (src.genClient.getJsonObject() != null) {
      genClient.setJsonObject(com.clover.sdk.v3.JsonHelper.deepCopy(src.genClient.getJSONObject()));
    }
  }

  /**
   * Returns the internal JSONObject backing this instance, the return value is not a copy so changes to it will be
   * reflected in this instance and vice-versa.
   */
  public org.json.JSONObject getJSONObject() {
    return genClient.getJSONObject();
  }

  @Override
  public void validate() {

    genClient.validateLength(getOrderId(), 13);

    genClient.validateLength(getPaymentId(), 13);

    genClient.validateLength(getEmployeeId(), 13);
  }

  /** Checks whether the 'action' field is set and is not null */
  public boolean isNotNullAction() {
    return genClient.cacheValueIsNotNull(CacheKey.action);
  }

  /** Checks whether the 'amount' field is set and is not null */
  public boolean isNotNullAmount() {
    return genClient.cacheValueIsNotNull(CacheKey.amount);
  }

  /** Checks whether the 'tippableAmount' field is set and is not null */
  public boolean isNotNullTippableAmount() {
    return genClient.cacheValueIsNotNull(CacheKey.tippableAmount);
  }

  /** Checks whether the 'tipAmount' field is set and is not null */
  public boolean isNotNullTipAmount() {
    return genClient.cacheValueIsNotNull(CacheKey.tipAmount);
  }

  /** Checks whether the 'taxAmount' field is set and is not null */
  public boolean isNotNullTaxAmount() {
    return genClient.cacheValueIsNotNull(CacheKey.taxAmount);
  }

  /** Checks whether the 'orderId' field is set and is not null */
  public boolean isNotNullOrderId() {
    return genClient.cacheValueIsNotNull(CacheKey.orderId);
  }

  /** Checks whether the 'paymentId' field is set and is not null */
  public boolean isNotNullPaymentId() {
    return genClient.cacheValueIsNotNull(CacheKey.paymentId);
  }

  /** Checks whether the 'employeeId' field is set and is not null */
  public boolean isNotNullEmployeeId() {
    return genClient.cacheValueIsNotNull(CacheKey.employeeId);
  }

  /** Checks whether the 'transactionType' field is set and is not null */
  public boolean isNotNullTransactionType() {
    return genClient.cacheValueIsNotNull(CacheKey.transactionType);
  }

  /** Checks whether the 'taxableAmountRates' field is set and is not null */
  public boolean isNotNullTaxableAmountRates() {
    return genClient.cacheValueIsNotNull(CacheKey.taxableAmountRates);
  }

  /** Checks whether the 'taxableAmountRates' field is set and is not null and is not empty */
  public boolean isNotEmptyTaxableAmountRates() { return isNotNullTaxableAmountRates() && !getTaxableAmountRates().isEmpty(); }

  /** Checks whether the 'serviceChargeAmount' field is set and is not null */
  public boolean isNotNullServiceChargeAmount() {
    return genClient.cacheValueIsNotNull(CacheKey.serviceChargeAmount);
  }

  /** Checks whether the 'serviceChargeAmount' field is set and is not null and is not empty */
  public boolean isNotEmptyServiceChargeAmount() { return isNotNullServiceChargeAmount() && !getServiceChargeAmount().isEmpty(); }

  /** Checks whether the 'isDisableCashBack' field is set and is not null */
  public boolean isNotNullIsDisableCashBack() {
    return genClient.cacheValueIsNotNull(CacheKey.isDisableCashBack);
  }

  /** Checks whether the 'isTesting' field is set and is not null */
  public boolean isNotNullIsTesting() {
    return genClient.cacheValueIsNotNull(CacheKey.isTesting);
  }

  /** Checks whether the 'cardEntryMethods' field is set and is not null */
  public boolean isNotNullCardEntryMethods() {
    return genClient.cacheValueIsNotNull(CacheKey.cardEntryMethods);
  }

  /** Checks whether the 'voiceAuthCode' field is set and is not null */
  public boolean isNotNullVoiceAuthCode() {
    return genClient.cacheValueIsNotNull(CacheKey.voiceAuthCode);
  }

  /** Checks whether the 'streetAddress' field is set and is not null */
  public boolean isNotNullStreetAddress() {
    return genClient.cacheValueIsNotNull(CacheKey.streetAddress);
  }

  /** Checks whether the 'postalCode' field is set and is not null */
  public boolean isNotNullPostalCode() {
    return genClient.cacheValueIsNotNull(CacheKey.postalCode);
  }

  /** Checks whether the 'isCardNotPresent' field is set and is not null */
  public boolean isNotNullIsCardNotPresent() {
    return genClient.cacheValueIsNotNull(CacheKey.isCardNotPresent);
  }

  /** Checks whether the 'cardDataMessage' field is set and is not null */
  public boolean isNotNullCardDataMessage() {
    return genClient.cacheValueIsNotNull(CacheKey.cardDataMessage);
  }

  /** Checks whether the 'remotePrint' field is set and is not null */
  public boolean isNotNullRemotePrint() {
    return genClient.cacheValueIsNotNull(CacheKey.remotePrint);
  }

  /** Checks whether the 'transactionNo' field is set and is not null */
  public boolean isNotNullTransactionNo() {
    return genClient.cacheValueIsNotNull(CacheKey.transactionNo);
  }

  /** Checks whether the 'isForceSwipePinEntry' field is set and is not null */
  public boolean isNotNullIsForceSwipePinEntry() {
    return genClient.cacheValueIsNotNull(CacheKey.isForceSwipePinEntry);
  }

  /** Checks whether the 'disableRestartTransactionWhenFailed' field is set and is not null */
  public boolean isNotNullDisableRestartTransactionWhenFailed() {
    return genClient.cacheValueIsNotNull(CacheKey.disableRestartTransactionWhenFailed);
  }

  /** Checks whether the 'externalPaymentId' field is set and is not null */
  public boolean isNotNullExternalPaymentId() {
    return genClient.cacheValueIsNotNull(CacheKey.externalPaymentId);
  }

  /** Checks whether the 'vaultedCard' field is set and is not null */
  public boolean isNotNullVaultedCard() {
    return genClient.cacheValueIsNotNull(CacheKey.vaultedCard);
  }

  /** Checks whether the 'allowOfflinePayment' field is set and is not null */
  public boolean isNotNullAllowOfflinePayment() {
    return genClient.cacheValueIsNotNull(CacheKey.allowOfflinePayment);
  }

  /** Checks whether the 'approveOfflinePaymentWithoutPrompt' field is set and is not null */
  public boolean isNotNullApproveOfflinePaymentWithoutPrompt() {
    return genClient.cacheValueIsNotNull(CacheKey.approveOfflinePaymentWithoutPrompt);
  }

  /** Checks whether the 'requiresRemoteConfirmation' field is set and is not null */
  public boolean isNotNullRequiresRemoteConfirmation() {
    return genClient.cacheValueIsNotNull(CacheKey.requiresRemoteConfirmation);
  }

  /** Checks whether the 'applicationTracking' field is set and is not null */
  public boolean isNotNullApplicationTracking() {
    return genClient.cacheValueIsNotNull(CacheKey.applicationTracking);
  }

  /** Checks whether the 'allowPartialAuth' field is set and is not null */
  public boolean isNotNullAllowPartialAuth() {
    return genClient.cacheValueIsNotNull(CacheKey.allowPartialAuth);
  }

  /** Checks whether the 'germanInfo' field is set and is not null */
  public boolean isNotNullGermanInfo() {
    return genClient.cacheValueIsNotNull(CacheKey.germanInfo);
  }

  /** Checks whether the 'cashAdvanceCustomerIdentification' field is set and is not null */
  public boolean isNotNullCashAdvanceCustomerIdentification() {
    return genClient.cacheValueIsNotNull(CacheKey.cashAdvanceCustomerIdentification);
  }

  /** Checks whether the 'transactionSettings' field is set and is not null */
  public boolean isNotNullTransactionSettings() {
    return genClient.cacheValueIsNotNull(CacheKey.transactionSettings);
  }



  /** Checks whether the 'action' field has been set, however the value could be null */
  public boolean hasAction() {
    return genClient.cacheHasKey(CacheKey.action);
  }

  /** Checks whether the 'amount' field has been set, however the value could be null */
  public boolean hasAmount() {
    return genClient.cacheHasKey(CacheKey.amount);
  }

  /** Checks whether the 'tippableAmount' field has been set, however the value could be null */
  public boolean hasTippableAmount() {
    return genClient.cacheHasKey(CacheKey.tippableAmount);
  }

  /** Checks whether the 'tipAmount' field has been set, however the value could be null */
  public boolean hasTipAmount() {
    return genClient.cacheHasKey(CacheKey.tipAmount);
  }

  /** Checks whether the 'taxAmount' field has been set, however the value could be null */
  public boolean hasTaxAmount() {
    return genClient.cacheHasKey(CacheKey.taxAmount);
  }

  /** Checks whether the 'orderId' field has been set, however the value could be null */
  public boolean hasOrderId() {
    return genClient.cacheHasKey(CacheKey.orderId);
  }

  /** Checks whether the 'paymentId' field has been set, however the value could be null */
  public boolean hasPaymentId() {
    return genClient.cacheHasKey(CacheKey.paymentId);
  }

  /** Checks whether the 'employeeId' field has been set, however the value could be null */
  public boolean hasEmployeeId() {
    return genClient.cacheHasKey(CacheKey.employeeId);
  }

  /** Checks whether the 'transactionType' field has been set, however the value could be null */
  public boolean hasTransactionType() {
    return genClient.cacheHasKey(CacheKey.transactionType);
  }

  /** Checks whether the 'taxableAmountRates' field has been set, however the value could be null */
  public boolean hasTaxableAmountRates() {
    return genClient.cacheHasKey(CacheKey.taxableAmountRates);
  }

  /** Checks whether the 'serviceChargeAmount' field has been set, however the value could be null */
  public boolean hasServiceChargeAmount() {
    return genClient.cacheHasKey(CacheKey.serviceChargeAmount);
  }

  /** Checks whether the 'isDisableCashBack' field has been set, however the value could be null */
  public boolean hasIsDisableCashBack() {
    return genClient.cacheHasKey(CacheKey.isDisableCashBack);
  }

  /** Checks whether the 'isTesting' field has been set, however the value could be null */
  public boolean hasIsTesting() {
    return genClient.cacheHasKey(CacheKey.isTesting);
  }

  /** Checks whether the 'cardEntryMethods' field has been set, however the value could be null */
  public boolean hasCardEntryMethods() {
    return genClient.cacheHasKey(CacheKey.cardEntryMethods);
  }

  /** Checks whether the 'voiceAuthCode' field has been set, however the value could be null */
  public boolean hasVoiceAuthCode() {
    return genClient.cacheHasKey(CacheKey.voiceAuthCode);
  }

  /** Checks whether the 'streetAddress' field has been set, however the value could be null */
  public boolean hasStreetAddress() {
    return genClient.cacheHasKey(CacheKey.streetAddress);
  }

  /** Checks whether the 'postalCode' field has been set, however the value could be null */
  public boolean hasPostalCode() {
    return genClient.cacheHasKey(CacheKey.postalCode);
  }

  /** Checks whether the 'isCardNotPresent' field has been set, however the value could be null */
  public boolean hasIsCardNotPresent() {
    return genClient.cacheHasKey(CacheKey.isCardNotPresent);
  }

  /** Checks whether the 'cardDataMessage' field has been set, however the value could be null */
  public boolean hasCardDataMessage() {
    return genClient.cacheHasKey(CacheKey.cardDataMessage);
  }

  /** Checks whether the 'remotePrint' field has been set, however the value could be null */
  public boolean hasRemotePrint() {
    return genClient.cacheHasKey(CacheKey.remotePrint);
  }

  /** Checks whether the 'transactionNo' field has been set, however the value could be null */
  public boolean hasTransactionNo() {
    return genClient.cacheHasKey(CacheKey.transactionNo);
  }

  /** Checks whether the 'isForceSwipePinEntry' field has been set, however the value could be null */
  public boolean hasIsForceSwipePinEntry() {
    return genClient.cacheHasKey(CacheKey.isForceSwipePinEntry);
  }

  /** Checks whether the 'disableRestartTransactionWhenFailed' field has been set, however the value could be null */
  public boolean hasDisableRestartTransactionWhenFailed() {
    return genClient.cacheHasKey(CacheKey.disableRestartTransactionWhenFailed);
  }

  /** Checks whether the 'externalPaymentId' field has been set, however the value could be null */
  public boolean hasExternalPaymentId() {
    return genClient.cacheHasKey(CacheKey.externalPaymentId);
  }

  /** Checks whether the 'vaultedCard' field has been set, however the value could be null */
  public boolean hasVaultedCard() {
    return genClient.cacheHasKey(CacheKey.vaultedCard);
  }

  /** Checks whether the 'allowOfflinePayment' field has been set, however the value could be null */
  public boolean hasAllowOfflinePayment() {
    return genClient.cacheHasKey(CacheKey.allowOfflinePayment);
  }

  /** Checks whether the 'approveOfflinePaymentWithoutPrompt' field has been set, however the value could be null */
  public boolean hasApproveOfflinePaymentWithoutPrompt() {
    return genClient.cacheHasKey(CacheKey.approveOfflinePaymentWithoutPrompt);
  }

  /** Checks whether the 'requiresRemoteConfirmation' field has been set, however the value could be null */
  public boolean hasRequiresRemoteConfirmation() {
    return genClient.cacheHasKey(CacheKey.requiresRemoteConfirmation);
  }

  /** Checks whether the 'applicationTracking' field has been set, however the value could be null */
  public boolean hasApplicationTracking() {
    return genClient.cacheHasKey(CacheKey.applicationTracking);
  }

  /** Checks whether the 'allowPartialAuth' field has been set, however the value could be null */
  public boolean hasAllowPartialAuth() {
    return genClient.cacheHasKey(CacheKey.allowPartialAuth);
  }

  /** Checks whether the 'germanInfo' field has been set, however the value could be null */
  public boolean hasGermanInfo() {
    return genClient.cacheHasKey(CacheKey.germanInfo);
  }

  /** Checks whether the 'cashAdvanceCustomerIdentification' field has been set, however the value could be null */
  public boolean hasCashAdvanceCustomerIdentification() {
    return genClient.cacheHasKey(CacheKey.cashAdvanceCustomerIdentification);
  }

  /** Checks whether the 'transactionSettings' field has been set, however the value could be null */
  public boolean hasTransactionSettings() {
    return genClient.cacheHasKey(CacheKey.transactionSettings);
  }


  /**
   * Sets the field 'action'.
   */
  public PayIntent setAction(java.lang.String action) {
    return genClient.setOther(action, CacheKey.action);
  }

  /**
   * Sets the field 'amount'.
   */
  public PayIntent setAmount(java.lang.Long amount) {
    return genClient.setOther(amount, CacheKey.amount);
  }

  /**
   * Sets the field 'tippableAmount'.
   */
  public PayIntent setTippableAmount(java.lang.Long tippableAmount) {
    return genClient.setOther(tippableAmount, CacheKey.tippableAmount);
  }

  /**
   * Sets the field 'tipAmount'.
   */
  public PayIntent setTipAmount(java.lang.Long tipAmount) {
    return genClient.setOther(tipAmount, CacheKey.tipAmount);
  }

  /**
   * Sets the field 'taxAmount'.
   */
  public PayIntent setTaxAmount(java.lang.Long taxAmount) {
    return genClient.setOther(taxAmount, CacheKey.taxAmount);
  }

  /**
   * Sets the field 'orderId'.
   */
  public PayIntent setOrderId(java.lang.String orderId) {
    return genClient.setOther(orderId, CacheKey.orderId);
  }

  /**
   * Sets the field 'paymentId'.
   */
  public PayIntent setPaymentId(java.lang.String paymentId) {
    return genClient.setOther(paymentId, CacheKey.paymentId);
  }

  /**
   * Sets the field 'employeeId'.
   */
  public PayIntent setEmployeeId(java.lang.String employeeId) {
    return genClient.setOther(employeeId, CacheKey.employeeId);
  }

  /**
   * Sets the field 'transactionType'.
   */
  public PayIntent setTransactionType(com.clover.sdk.v3.remotemessage.TransactionType transactionType) {
    return genClient.setOther(transactionType, CacheKey.transactionType);
  }

  /**
   * Sets the field 'taxableAmountRates'.
   *
   * Nulls in the given List are skipped. List parameter is copied, so it will not reflect any changes, but objects inside it will.
   */
  public PayIntent setTaxableAmountRates(java.util.List<com.clover.sdk.v3.payments.TaxableAmountRate> taxableAmountRates) {
    return genClient.setArrayRecord(taxableAmountRates, CacheKey.taxableAmountRates);
  }

  /**
   * Sets the field 'serviceChargeAmount'.
   *
   * Nulls in the given List are skipped. List parameter is copied, so it will not reflect any changes, but objects inside it will.
   */
  public PayIntent setServiceChargeAmount(java.util.List<com.clover.sdk.v3.payments.ServiceChargeAmount> serviceChargeAmount) {
    return genClient.setArrayRecord(serviceChargeAmount, CacheKey.serviceChargeAmount);
  }

  /**
   * Sets the field 'isDisableCashBack'.
   */
  public PayIntent setIsDisableCashBack(java.lang.Boolean isDisableCashBack) {
    return genClient.setOther(isDisableCashBack, CacheKey.isDisableCashBack);
  }

  /**
   * Sets the field 'isTesting'.
   */
  public PayIntent setIsTesting(java.lang.Boolean isTesting) {
    return genClient.setOther(isTesting, CacheKey.isTesting);
  }

  /**
   * Sets the field 'cardEntryMethods'.
   */
  public PayIntent setCardEntryMethods(java.lang.Integer cardEntryMethods) {
    return genClient.setOther(cardEntryMethods, CacheKey.cardEntryMethods);
  }

  /**
   * Sets the field 'voiceAuthCode'.
   */
  public PayIntent setVoiceAuthCode(java.lang.String voiceAuthCode) {
    return genClient.setOther(voiceAuthCode, CacheKey.voiceAuthCode);
  }

  /**
   * Sets the field 'streetAddress'.
   */
  public PayIntent setStreetAddress(java.lang.String streetAddress) {
    return genClient.setOther(streetAddress, CacheKey.streetAddress);
  }

  /**
   * Sets the field 'postalCode'.
   */
  public PayIntent setPostalCode(java.lang.String postalCode) {
    return genClient.setOther(postalCode, CacheKey.postalCode);
  }

  /**
   * Sets the field 'isCardNotPresent'.
   */
  public PayIntent setIsCardNotPresent(java.lang.Boolean isCardNotPresent) {
    return genClient.setOther(isCardNotPresent, CacheKey.isCardNotPresent);
  }

  /**
   * Sets the field 'cardDataMessage'.
   */
  public PayIntent setCardDataMessage(java.lang.String cardDataMessage) {
    return genClient.setOther(cardDataMessage, CacheKey.cardDataMessage);
  }

  /**
   * Sets the field 'remotePrint'.
   */
  public PayIntent setRemotePrint(java.lang.Boolean remotePrint) {
    return genClient.setOther(remotePrint, CacheKey.remotePrint);
  }

  /**
   * Sets the field 'transactionNo'.
   */
  public PayIntent setTransactionNo(java.lang.String transactionNo) {
    return genClient.setOther(transactionNo, CacheKey.transactionNo);
  }

  /**
   * Sets the field 'isForceSwipePinEntry'.
   */
  public PayIntent setIsForceSwipePinEntry(java.lang.Boolean isForceSwipePinEntry) {
    return genClient.setOther(isForceSwipePinEntry, CacheKey.isForceSwipePinEntry);
  }

  /**
   * Sets the field 'disableRestartTransactionWhenFailed'.
   */
  public PayIntent setDisableRestartTransactionWhenFailed(java.lang.Boolean disableRestartTransactionWhenFailed) {
    return genClient.setOther(disableRestartTransactionWhenFailed, CacheKey.disableRestartTransactionWhenFailed);
  }

  /**
   * Sets the field 'externalPaymentId'.
   */
  public PayIntent setExternalPaymentId(java.lang.String externalPaymentId) {
    return genClient.setOther(externalPaymentId, CacheKey.externalPaymentId);
  }

  /**
   * Sets the field 'vaultedCard'.
   *
   * The parameter is not copied so changes to it will be reflected in this instance and vice-versa.
   */
  public PayIntent setVaultedCard(com.clover.sdk.v3.payments.VaultedCard vaultedCard) {
    return genClient.setRecord(vaultedCard, CacheKey.vaultedCard);
  }

  /**
   * Sets the field 'allowOfflinePayment'.
   */
  public PayIntent setAllowOfflinePayment(java.lang.Boolean allowOfflinePayment) {
    return genClient.setOther(allowOfflinePayment, CacheKey.allowOfflinePayment);
  }

  /**
   * Sets the field 'approveOfflinePaymentWithoutPrompt'.
   */
  public PayIntent setApproveOfflinePaymentWithoutPrompt(java.lang.Boolean approveOfflinePaymentWithoutPrompt) {
    return genClient.setOther(approveOfflinePaymentWithoutPrompt, CacheKey.approveOfflinePaymentWithoutPrompt);
  }

  /**
   * Sets the field 'requiresRemoteConfirmation'.
   */
  public PayIntent setRequiresRemoteConfirmation(java.lang.Boolean requiresRemoteConfirmation) {
    return genClient.setOther(requiresRemoteConfirmation, CacheKey.requiresRemoteConfirmation);
  }

  /**
   * Sets the field 'applicationTracking'.
   *
   * The parameter is not copied so changes to it will be reflected in this instance and vice-versa.
   */
  public PayIntent setApplicationTracking(com.clover.sdk.v3.apps.AppTracking applicationTracking) {
    return genClient.setRecord(applicationTracking, CacheKey.applicationTracking);
  }

  /**
   * Sets the field 'allowPartialAuth'.
   */
  public PayIntent setAllowPartialAuth(java.lang.Boolean allowPartialAuth) {
    return genClient.setOther(allowPartialAuth, CacheKey.allowPartialAuth);
  }

  /**
   * Sets the field 'germanInfo'.
   *
   * The parameter is not copied so changes to it will be reflected in this instance and vice-versa.
   */
  public PayIntent setGermanInfo(com.clover.sdk.v3.payments.GermanInfo germanInfo) {
    return genClient.setRecord(germanInfo, CacheKey.germanInfo);
  }

  /**
   * Sets the field 'cashAdvanceCustomerIdentification'.
   *
   * The parameter is not copied so changes to it will be reflected in this instance and vice-versa.
   */
  public PayIntent setCashAdvanceCustomerIdentification(com.clover.sdk.v3.payments.CashAdvanceCustomerIdentification cashAdvanceCustomerIdentification) {
    return genClient.setRecord(cashAdvanceCustomerIdentification, CacheKey.cashAdvanceCustomerIdentification);
  }

  /**
   * Sets the field 'transactionSettings'.
   *
   * The parameter is not copied so changes to it will be reflected in this instance and vice-versa.
   */
  public PayIntent setTransactionSettings(com.clover.sdk.v3.payments.TransactionSettings transactionSettings) {
    return genClient.setRecord(transactionSettings, CacheKey.transactionSettings);
  }


  /** Clears the 'action' field, the 'has' method for this field will now return false */
  public void clearAction() {
    genClient.clear(CacheKey.action);
  }
  /** Clears the 'amount' field, the 'has' method for this field will now return false */
  public void clearAmount() {
    genClient.clear(CacheKey.amount);
  }
  /** Clears the 'tippableAmount' field, the 'has' method for this field will now return false */
  public void clearTippableAmount() {
    genClient.clear(CacheKey.tippableAmount);
  }
  /** Clears the 'tipAmount' field, the 'has' method for this field will now return false */
  public void clearTipAmount() {
    genClient.clear(CacheKey.tipAmount);
  }
  /** Clears the 'taxAmount' field, the 'has' method for this field will now return false */
  public void clearTaxAmount() {
    genClient.clear(CacheKey.taxAmount);
  }
  /** Clears the 'orderId' field, the 'has' method for this field will now return false */
  public void clearOrderId() {
    genClient.clear(CacheKey.orderId);
  }
  /** Clears the 'paymentId' field, the 'has' method for this field will now return false */
  public void clearPaymentId() {
    genClient.clear(CacheKey.paymentId);
  }
  /** Clears the 'employeeId' field, the 'has' method for this field will now return false */
  public void clearEmployeeId() {
    genClient.clear(CacheKey.employeeId);
  }
  /** Clears the 'transactionType' field, the 'has' method for this field will now return false */
  public void clearTransactionType() {
    genClient.clear(CacheKey.transactionType);
  }
  /** Clears the 'taxableAmountRates' field, the 'has' method for this field will now return false */
  public void clearTaxableAmountRates() {
    genClient.clear(CacheKey.taxableAmountRates);
  }
  /** Clears the 'serviceChargeAmount' field, the 'has' method for this field will now return false */
  public void clearServiceChargeAmount() {
    genClient.clear(CacheKey.serviceChargeAmount);
  }
  /** Clears the 'isDisableCashBack' field, the 'has' method for this field will now return false */
  public void clearIsDisableCashBack() {
    genClient.clear(CacheKey.isDisableCashBack);
  }
  /** Clears the 'isTesting' field, the 'has' method for this field will now return false */
  public void clearIsTesting() {
    genClient.clear(CacheKey.isTesting);
  }
  /** Clears the 'cardEntryMethods' field, the 'has' method for this field will now return false */
  public void clearCardEntryMethods() {
    genClient.clear(CacheKey.cardEntryMethods);
  }
  /** Clears the 'voiceAuthCode' field, the 'has' method for this field will now return false */
  public void clearVoiceAuthCode() {
    genClient.clear(CacheKey.voiceAuthCode);
  }
  /** Clears the 'streetAddress' field, the 'has' method for this field will now return false */
  public void clearStreetAddress() {
    genClient.clear(CacheKey.streetAddress);
  }
  /** Clears the 'postalCode' field, the 'has' method for this field will now return false */
  public void clearPostalCode() {
    genClient.clear(CacheKey.postalCode);
  }
  /** Clears the 'isCardNotPresent' field, the 'has' method for this field will now return false */
  public void clearIsCardNotPresent() {
    genClient.clear(CacheKey.isCardNotPresent);
  }
  /** Clears the 'cardDataMessage' field, the 'has' method for this field will now return false */
  public void clearCardDataMessage() {
    genClient.clear(CacheKey.cardDataMessage);
  }
  /** Clears the 'remotePrint' field, the 'has' method for this field will now return false */
  public void clearRemotePrint() {
    genClient.clear(CacheKey.remotePrint);
  }
  /** Clears the 'transactionNo' field, the 'has' method for this field will now return false */
  public void clearTransactionNo() {
    genClient.clear(CacheKey.transactionNo);
  }
  /** Clears the 'isForceSwipePinEntry' field, the 'has' method for this field will now return false */
  public void clearIsForceSwipePinEntry() {
    genClient.clear(CacheKey.isForceSwipePinEntry);
  }
  /** Clears the 'disableRestartTransactionWhenFailed' field, the 'has' method for this field will now return false */
  public void clearDisableRestartTransactionWhenFailed() {
    genClient.clear(CacheKey.disableRestartTransactionWhenFailed);
  }
  /** Clears the 'externalPaymentId' field, the 'has' method for this field will now return false */
  public void clearExternalPaymentId() {
    genClient.clear(CacheKey.externalPaymentId);
  }
  /** Clears the 'vaultedCard' field, the 'has' method for this field will now return false */
  public void clearVaultedCard() {
    genClient.clear(CacheKey.vaultedCard);
  }
  /** Clears the 'allowOfflinePayment' field, the 'has' method for this field will now return false */
  public void clearAllowOfflinePayment() {
    genClient.clear(CacheKey.allowOfflinePayment);
  }
  /** Clears the 'approveOfflinePaymentWithoutPrompt' field, the 'has' method for this field will now return false */
  public void clearApproveOfflinePaymentWithoutPrompt() {
    genClient.clear(CacheKey.approveOfflinePaymentWithoutPrompt);
  }
  /** Clears the 'requiresRemoteConfirmation' field, the 'has' method for this field will now return false */
  public void clearRequiresRemoteConfirmation() {
    genClient.clear(CacheKey.requiresRemoteConfirmation);
  }
  /** Clears the 'applicationTracking' field, the 'has' method for this field will now return false */
  public void clearApplicationTracking() {
    genClient.clear(CacheKey.applicationTracking);
  }
  /** Clears the 'allowPartialAuth' field, the 'has' method for this field will now return false */
  public void clearAllowPartialAuth() {
    genClient.clear(CacheKey.allowPartialAuth);
  }
  /** Clears the 'germanInfo' field, the 'has' method for this field will now return false */
  public void clearGermanInfo() {
    genClient.clear(CacheKey.germanInfo);
  }
  /** Clears the 'cashAdvanceCustomerIdentification' field, the 'has' method for this field will now return false */
  public void clearCashAdvanceCustomerIdentification() {
    genClient.clear(CacheKey.cashAdvanceCustomerIdentification);
  }
  /** Clears the 'transactionSettings' field, the 'has' method for this field will now return false */
  public void clearTransactionSettings() {
    genClient.clear(CacheKey.transactionSettings);
  }


  /**
   * Returns true if this instance has any changes.
   */
  public boolean containsChanges() {
    return genClient.containsChanges();
  }

  /**
   * Reset the log of changes made to this instance, calling copyChanges() after this would return an empty instance.
   */
  public void resetChangeLog() {
    genClient.resetChangeLog();
  }

  /**
   * Create a copy of this instance that contains only fields that were set after the constructor was called.
   */
  public PayIntent copyChanges() {
    PayIntent copy = new PayIntent();
    copy.mergeChanges(this);
    copy.resetChangeLog();
    return copy;
  }

  /**
   * Copy all the changed fields from the given source to this instance.
   */
  public void mergeChanges(PayIntent src) {
    if (src.genClient.getChangeLog() != null) {
      genClient.mergeChanges(new PayIntent(src).getJSONObject(), src.genClient);
    }
  }

  public static final android.os.Parcelable.Creator<PayIntent> CREATOR = new android.os.Parcelable.Creator<PayIntent>() {
    @Override
    public PayIntent createFromParcel(android.os.Parcel in) {
      PayIntent instance = new PayIntent(com.clover.sdk.v3.JsonParcelHelper.ObjectWrapper.CREATOR.createFromParcel(in).unwrap());
      instance.genClient.setBundle(in.readBundle(getClass().getClassLoader()));
      instance.genClient.setChangeLog(in.readBundle());
      return instance;
    }

    @Override
    public PayIntent[] newArray(int size) {
      return new PayIntent[size];
    }
  };

  public static final com.clover.sdk.JSONifiable.Creator<PayIntent> JSON_CREATOR = new com.clover.sdk.JSONifiable.Creator<PayIntent>() {
    @Override
    public PayIntent create(org.json.JSONObject jsonObject) {
      return new PayIntent(jsonObject);
    }
  };

  public interface Constraints {

    public static final boolean ACTION_IS_REQUIRED = false;
    public static final boolean AMOUNT_IS_REQUIRED = false;
    public static final boolean TIPPABLEAMOUNT_IS_REQUIRED = false;
    public static final boolean TIPAMOUNT_IS_REQUIRED = false;
    public static final boolean TAXAMOUNT_IS_REQUIRED = false;
    public static final boolean ORDERID_IS_REQUIRED = false;
    public static final long ORDERID_MAX_LEN = 13;
    public static final boolean PAYMENTID_IS_REQUIRED = false;
    public static final long PAYMENTID_MAX_LEN = 13;
    public static final boolean EMPLOYEEID_IS_REQUIRED = false;
    public static final long EMPLOYEEID_MAX_LEN = 13;
    public static final boolean TRANSACTIONTYPE_IS_REQUIRED = false;
    public static final boolean TAXABLEAMOUNTRATES_IS_REQUIRED = false;
    public static final boolean SERVICECHARGEAMOUNT_IS_REQUIRED = false;
    public static final boolean ISDISABLECASHBACK_IS_REQUIRED = false;
    public static final boolean ISTESTING_IS_REQUIRED = false;
    public static final boolean CARDENTRYMETHODS_IS_REQUIRED = false;
    public static final boolean VOICEAUTHCODE_IS_REQUIRED = false;
    public static final boolean STREETADDRESS_IS_REQUIRED = false;
    public static final boolean POSTALCODE_IS_REQUIRED = false;
    public static final boolean ISCARDNOTPRESENT_IS_REQUIRED = false;
    public static final boolean CARDDATAMESSAGE_IS_REQUIRED = false;
    public static final boolean REMOTEPRINT_IS_REQUIRED = false;
    public static final boolean TRANSACTIONNO_IS_REQUIRED = false;
    public static final boolean ISFORCESWIPEPINENTRY_IS_REQUIRED = false;
    public static final boolean DISABLERESTARTTRANSACTIONWHENFAILED_IS_REQUIRED = false;
    public static final boolean EXTERNALPAYMENTID_IS_REQUIRED = false;
    public static final boolean VAULTEDCARD_IS_REQUIRED = false;
    public static final boolean ALLOWOFFLINEPAYMENT_IS_REQUIRED = false;
    public static final boolean APPROVEOFFLINEPAYMENTWITHOUTPROMPT_IS_REQUIRED = false;
    public static final boolean REQUIRESREMOTECONFIRMATION_IS_REQUIRED = false;
    public static final boolean APPLICATIONTRACKING_IS_REQUIRED = false;
    public static final boolean ALLOWPARTIALAUTH_IS_REQUIRED = false;
    public static final boolean GERMANINFO_IS_REQUIRED = false;
    public static final boolean CASHADVANCECUSTOMERIDENTIFICATION_IS_REQUIRED = false;
    public static final boolean TRANSACTIONSETTINGS_IS_REQUIRED = false;

  }

}
